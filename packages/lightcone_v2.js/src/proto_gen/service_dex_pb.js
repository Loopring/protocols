/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.object.extend(proto, google_protobuf_wrappers_pb);
var data_order_pb = require('./data_order_pb.js');
goog.object.extend(proto, data_order_pb);
var data_requests_pb = require('./data_requests_pb.js');
goog.object.extend(proto, data_requests_pb);
var data_types_pb = require('./data_types_pb.js');
goog.object.extend(proto, data_types_pb);
goog.exportSymbol('proto.io.lightcone.data.dex.Account', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.CancelOrderRes', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.Candles', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.Candles.OHLC', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.DexConfigurations', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.Fill', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.GetAvailableBalanceReq', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.GetAvailableBalanceRes', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.GetCandlesReq', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.GetFillsRes', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.GetMarketFillsReq', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.GetMarketsReq', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.GetMarketsRes', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.GetNextOrderIdReq', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.GetOrderBookReq', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.GetTokensReq', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.GetTokensRes', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.GetUserFillsReq', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.GetUserOrdersReq', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.GetUserOrdersRes', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.GetUserTransactionsReq', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.GetUserTransactionsRes', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.MarketTicker', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.OffchainWithdrawalalRes', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.Order', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.OrderBook', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.OrderBook.Item', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.OrderBook.Update', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.SimpleOrderCancellationReq', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.SocketIOSubscription', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.SocketIOSubscription.Ack', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.SocketIOSubscription.Notification', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForInternalTickers', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.SubmitOrderRes', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.TokenBalance', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.TokenInfo', null, global);
goog.exportSymbol('proto.io.lightcone.data.dex.UserTransaction', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.DexConfigurations = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.lightcone.data.dex.DexConfigurations, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.DexConfigurations.displayName = 'proto.io.lightcone.data.dex.DexConfigurations';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.DexConfigurations.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.DexConfigurations.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.DexConfigurations} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.DexConfigurations.toObject = function(includeInstance, msg) {
  var f, obj = {
    dexId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dexAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    depositFeeEth: jspb.Message.getFieldWithDefault(msg, 3, ""),
    onchainWithdrawalFeeEth: jspb.Message.getFieldWithDefault(msg, 4, ""),
    offchainWithdrawalFeeTokenId: (f = msg.getOffchainWithdrawalFeeTokenId()) && data_types_pb.TokenID.toObject(includeInstance, f),
    offchainWithdrawalFeeAmount: jspb.Message.getFieldWithDefault(msg, 6, ""),
    orderCancellationFeeEth: jspb.Message.getFieldWithDefault(msg, 7, ""),
    inMaintainance: jspb.Message.getFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.DexConfigurations}
 */
proto.io.lightcone.data.dex.DexConfigurations.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.DexConfigurations;
  return proto.io.lightcone.data.dex.DexConfigurations.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.DexConfigurations} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.DexConfigurations}
 */
proto.io.lightcone.data.dex.DexConfigurations.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDexId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDexAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDepositFeeEth(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOnchainWithdrawalFeeEth(value);
      break;
    case 5:
      var value = new data_types_pb.TokenID;
      reader.readMessage(value,data_types_pb.TokenID.deserializeBinaryFromReader);
      msg.setOffchainWithdrawalFeeTokenId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOffchainWithdrawalFeeAmount(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderCancellationFeeEth(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInMaintainance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.DexConfigurations.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.DexConfigurations.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.DexConfigurations} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.DexConfigurations.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDexId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getDexAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDepositFeeEth();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOnchainWithdrawalFeeEth();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOffchainWithdrawalFeeTokenId();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      data_types_pb.TokenID.serializeBinaryToWriter
    );
  }
  f = message.getOffchainWithdrawalFeeAmount();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getOrderCancellationFeeEth();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getInMaintainance();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional uint64 dex_id = 1;
 * @return {number}
 */
proto.io.lightcone.data.dex.DexConfigurations.prototype.getDexId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.DexConfigurations.prototype.setDexId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string dex_address = 2;
 * @return {string}
 */
proto.io.lightcone.data.dex.DexConfigurations.prototype.getDexAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.io.lightcone.data.dex.DexConfigurations.prototype.setDexAddress = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string deposit_fee_eth = 3;
 * @return {string}
 */
proto.io.lightcone.data.dex.DexConfigurations.prototype.getDepositFeeEth = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.io.lightcone.data.dex.DexConfigurations.prototype.setDepositFeeEth = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string onchain_withdrawal_fee_eth = 4;
 * @return {string}
 */
proto.io.lightcone.data.dex.DexConfigurations.prototype.getOnchainWithdrawalFeeEth = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.io.lightcone.data.dex.DexConfigurations.prototype.setOnchainWithdrawalFeeEth = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional io.lightcone.data.types.TokenID offchain_withdrawal_fee_token_id = 5;
 * @return {?proto.io.lightcone.data.types.TokenID}
 */
proto.io.lightcone.data.dex.DexConfigurations.prototype.getOffchainWithdrawalFeeTokenId = function() {
  return /** @type{?proto.io.lightcone.data.types.TokenID} */ (
    jspb.Message.getWrapperField(this, data_types_pb.TokenID, 5));
};


/** @param {?proto.io.lightcone.data.types.TokenID|undefined} value */
proto.io.lightcone.data.dex.DexConfigurations.prototype.setOffchainWithdrawalFeeTokenId = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.io.lightcone.data.dex.DexConfigurations.prototype.clearOffchainWithdrawalFeeTokenId = function() {
  this.setOffchainWithdrawalFeeTokenId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.DexConfigurations.prototype.hasOffchainWithdrawalFeeTokenId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string offchain_withdrawal_fee_amount = 6;
 * @return {string}
 */
proto.io.lightcone.data.dex.DexConfigurations.prototype.getOffchainWithdrawalFeeAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.io.lightcone.data.dex.DexConfigurations.prototype.setOffchainWithdrawalFeeAmount = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string order_cancellation_fee_eth = 7;
 * @return {string}
 */
proto.io.lightcone.data.dex.DexConfigurations.prototype.getOrderCancellationFeeEth = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.io.lightcone.data.dex.DexConfigurations.prototype.setOrderCancellationFeeEth = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool in_maintainance = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.DexConfigurations.prototype.getInMaintainance = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.io.lightcone.data.dex.DexConfigurations.prototype.setInMaintainance = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.TokenInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.lightcone.data.dex.TokenInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.TokenInfo.displayName = 'proto.io.lightcone.data.dex.TokenInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.TokenInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.TokenInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.TokenInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.TokenInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    symbol: jspb.Message.getFieldWithDefault(msg, 2, ""),
    address: jspb.Message.getFieldWithDefault(msg, 3, ""),
    decimals: jspb.Message.getFieldWithDefault(msg, 4, 0),
    status: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.TokenInfo}
 */
proto.io.lightcone.data.dex.TokenInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.TokenInfo;
  return proto.io.lightcone.data.dex.TokenInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.TokenInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.TokenInfo}
 */
proto.io.lightcone.data.dex.TokenInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDecimals(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.TokenInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.TokenInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.TokenInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.TokenInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDecimals();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.io.lightcone.data.dex.TokenInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.TokenInfo.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string symbol = 2;
 * @return {string}
 */
proto.io.lightcone.data.dex.TokenInfo.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.io.lightcone.data.dex.TokenInfo.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string address = 3;
 * @return {string}
 */
proto.io.lightcone.data.dex.TokenInfo.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.io.lightcone.data.dex.TokenInfo.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 decimals = 4;
 * @return {number}
 */
proto.io.lightcone.data.dex.TokenInfo.prototype.getDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.TokenInfo.prototype.setDecimals = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string status = 5;
 * @return {string}
 */
proto.io.lightcone.data.dex.TokenInfo.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.io.lightcone.data.dex.TokenInfo.prototype.setStatus = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.GetTokensReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.lightcone.data.dex.GetTokensReq.repeatedFields_, null);
};
goog.inherits(proto.io.lightcone.data.dex.GetTokensReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.GetTokensReq.displayName = 'proto.io.lightcone.data.dex.GetTokensReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.lightcone.data.dex.GetTokensReq.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.GetTokensReq.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.GetTokensReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.GetTokensReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetTokensReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    requireMetadata: jspb.Message.getFieldWithDefault(msg, 1, false),
    requireInfo: jspb.Message.getFieldWithDefault(msg, 2, false),
    requirePrice: jspb.Message.getFieldWithDefault(msg, 3, false),
    quoteCurrencyForPrice: jspb.Message.getFieldWithDefault(msg, 4, ""),
    tokensList: jspb.Message.getRepeatedField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.GetTokensReq}
 */
proto.io.lightcone.data.dex.GetTokensReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.GetTokensReq;
  return proto.io.lightcone.data.dex.GetTokensReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.GetTokensReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.GetTokensReq}
 */
proto.io.lightcone.data.dex.GetTokensReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRequireMetadata(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRequireInfo(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRequirePrice(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuoteCurrencyForPrice(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addTokens(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.GetTokensReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.GetTokensReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.GetTokensReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetTokensReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequireMetadata();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getRequireInfo();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getRequirePrice();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getQuoteCurrencyForPrice();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTokensList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * optional bool require_metadata = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.GetTokensReq.prototype.getRequireMetadata = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.io.lightcone.data.dex.GetTokensReq.prototype.setRequireMetadata = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool require_info = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.GetTokensReq.prototype.getRequireInfo = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.io.lightcone.data.dex.GetTokensReq.prototype.setRequireInfo = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool require_price = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.GetTokensReq.prototype.getRequirePrice = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.io.lightcone.data.dex.GetTokensReq.prototype.setRequirePrice = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string quote_currency_for_price = 4;
 * @return {string}
 */
proto.io.lightcone.data.dex.GetTokensReq.prototype.getQuoteCurrencyForPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.io.lightcone.data.dex.GetTokensReq.prototype.setQuoteCurrencyForPrice = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated string tokens = 5;
 * @return {!Array<string>}
 */
proto.io.lightcone.data.dex.GetTokensReq.prototype.getTokensList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<string>} value */
proto.io.lightcone.data.dex.GetTokensReq.prototype.setTokensList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.io.lightcone.data.dex.GetTokensReq.prototype.addTokens = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.io.lightcone.data.dex.GetTokensReq.prototype.clearTokensList = function() {
  this.setTokensList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.GetTokensRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.lightcone.data.dex.GetTokensRes.repeatedFields_, null);
};
goog.inherits(proto.io.lightcone.data.dex.GetTokensRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.GetTokensRes.displayName = 'proto.io.lightcone.data.dex.GetTokensRes';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.lightcone.data.dex.GetTokensRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.GetTokensRes.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.GetTokensRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.GetTokensRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetTokensRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokensList: jspb.Message.toObjectList(msg.getTokensList(),
    data_types_pb.Token.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.GetTokensRes}
 */
proto.io.lightcone.data.dex.GetTokensRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.GetTokensRes;
  return proto.io.lightcone.data.dex.GetTokensRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.GetTokensRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.GetTokensRes}
 */
proto.io.lightcone.data.dex.GetTokensRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new data_types_pb.Token;
      reader.readMessage(value,data_types_pb.Token.deserializeBinaryFromReader);
      msg.addTokens(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.GetTokensRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.GetTokensRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.GetTokensRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetTokensRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokensList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      data_types_pb.Token.serializeBinaryToWriter
    );
  }
};


/**
 * repeated io.lightcone.data.types.Token tokens = 1;
 * @return {!Array<!proto.io.lightcone.data.types.Token>}
 */
proto.io.lightcone.data.dex.GetTokensRes.prototype.getTokensList = function() {
  return /** @type{!Array<!proto.io.lightcone.data.types.Token>} */ (
    jspb.Message.getRepeatedWrapperField(this, data_types_pb.Token, 1));
};


/** @param {!Array<!proto.io.lightcone.data.types.Token>} value */
proto.io.lightcone.data.dex.GetTokensRes.prototype.setTokensList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.io.lightcone.data.types.Token=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.lightcone.data.types.Token}
 */
proto.io.lightcone.data.dex.GetTokensRes.prototype.addTokens = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.io.lightcone.data.types.Token, opt_index);
};


proto.io.lightcone.data.dex.GetTokensRes.prototype.clearTokensList = function() {
  this.setTokensList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.GetMarketsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.lightcone.data.dex.GetMarketsReq.repeatedFields_, null);
};
goog.inherits(proto.io.lightcone.data.dex.GetMarketsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.GetMarketsReq.displayName = 'proto.io.lightcone.data.dex.GetMarketsReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.lightcone.data.dex.GetMarketsReq.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.GetMarketsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.GetMarketsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.GetMarketsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetMarketsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    requireMetadata: jspb.Message.getFieldWithDefault(msg, 1, false),
    requireTicker: jspb.Message.getFieldWithDefault(msg, 2, false),
    queryLoopringTicker: jspb.Message.getFieldWithDefault(msg, 3, false),
    quoteCurrencyForTicker: jspb.Message.getFieldWithDefault(msg, 4, ""),
    marketIdList: jspb.Message.getRepeatedField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.GetMarketsReq}
 */
proto.io.lightcone.data.dex.GetMarketsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.GetMarketsReq;
  return proto.io.lightcone.data.dex.GetMarketsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.GetMarketsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.GetMarketsReq}
 */
proto.io.lightcone.data.dex.GetMarketsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRequireMetadata(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRequireTicker(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setQueryLoopringTicker(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuoteCurrencyForTicker(value);
      break;
    case 5:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
      msg.setMarketIdList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.GetMarketsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.GetMarketsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.GetMarketsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetMarketsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequireMetadata();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getRequireTicker();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getQueryLoopringTicker();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getQuoteCurrencyForTicker();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMarketIdList();
  if (f.length > 0) {
    writer.writePackedUint64(
      5,
      f
    );
  }
};


/**
 * optional bool require_metadata = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.GetMarketsReq.prototype.getRequireMetadata = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.io.lightcone.data.dex.GetMarketsReq.prototype.setRequireMetadata = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool require_ticker = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.GetMarketsReq.prototype.getRequireTicker = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.io.lightcone.data.dex.GetMarketsReq.prototype.setRequireTicker = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool query_loopring_ticker = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.GetMarketsReq.prototype.getQueryLoopringTicker = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.io.lightcone.data.dex.GetMarketsReq.prototype.setQueryLoopringTicker = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string quote_currency_for_ticker = 4;
 * @return {string}
 */
proto.io.lightcone.data.dex.GetMarketsReq.prototype.getQuoteCurrencyForTicker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.io.lightcone.data.dex.GetMarketsReq.prototype.setQuoteCurrencyForTicker = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated uint64 market_id = 5;
 * @return {!Array<number>}
 */
proto.io.lightcone.data.dex.GetMarketsReq.prototype.getMarketIdList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<number>} value */
proto.io.lightcone.data.dex.GetMarketsReq.prototype.setMarketIdList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.io.lightcone.data.dex.GetMarketsReq.prototype.addMarketId = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.io.lightcone.data.dex.GetMarketsReq.prototype.clearMarketIdList = function() {
  this.setMarketIdList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.GetMarketsRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.lightcone.data.dex.GetMarketsRes.repeatedFields_, null);
};
goog.inherits(proto.io.lightcone.data.dex.GetMarketsRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.GetMarketsRes.displayName = 'proto.io.lightcone.data.dex.GetMarketsRes';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.lightcone.data.dex.GetMarketsRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.GetMarketsRes.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.GetMarketsRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.GetMarketsRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetMarketsRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketsList: jspb.Message.toObjectList(msg.getMarketsList(),
    data_types_pb.Market.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.GetMarketsRes}
 */
proto.io.lightcone.data.dex.GetMarketsRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.GetMarketsRes;
  return proto.io.lightcone.data.dex.GetMarketsRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.GetMarketsRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.GetMarketsRes}
 */
proto.io.lightcone.data.dex.GetMarketsRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new data_types_pb.Market;
      reader.readMessage(value,data_types_pb.Market.deserializeBinaryFromReader);
      msg.addMarkets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.GetMarketsRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.GetMarketsRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.GetMarketsRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetMarketsRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      data_types_pb.Market.serializeBinaryToWriter
    );
  }
};


/**
 * repeated io.lightcone.data.types.Market markets = 1;
 * @return {!Array<!proto.io.lightcone.data.types.Market>}
 */
proto.io.lightcone.data.dex.GetMarketsRes.prototype.getMarketsList = function() {
  return /** @type{!Array<!proto.io.lightcone.data.types.Market>} */ (
    jspb.Message.getRepeatedWrapperField(this, data_types_pb.Market, 1));
};


/** @param {!Array<!proto.io.lightcone.data.types.Market>} value */
proto.io.lightcone.data.dex.GetMarketsRes.prototype.setMarketsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.io.lightcone.data.types.Market=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.lightcone.data.types.Market}
 */
proto.io.lightcone.data.dex.GetMarketsRes.prototype.addMarkets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.io.lightcone.data.types.Market, opt_index);
};


proto.io.lightcone.data.dex.GetMarketsRes.prototype.clearMarketsList = function() {
  this.setMarketsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.TokenBalance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.lightcone.data.dex.TokenBalance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.TokenBalance.displayName = 'proto.io.lightcone.data.dex.TokenBalance';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.TokenBalance.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.TokenBalance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.TokenBalance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.TokenBalance.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    balance: jspb.Message.getFieldWithDefault(msg, 2, ""),
    orderFrozen: jspb.Message.getFieldWithDefault(msg, 3, ""),
    withdrawFrozen: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.TokenBalance}
 */
proto.io.lightcone.data.dex.TokenBalance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.TokenBalance;
  return proto.io.lightcone.data.dex.TokenBalance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.TokenBalance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.TokenBalance}
 */
proto.io.lightcone.data.dex.TokenBalance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBalance(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderFrozen(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setWithdrawFrozen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.TokenBalance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.TokenBalance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.TokenBalance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.TokenBalance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getBalance();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOrderFrozen();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getWithdrawFrozen();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.io.lightcone.data.dex.TokenBalance.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.TokenBalance.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string balance = 2;
 * @return {string}
 */
proto.io.lightcone.data.dex.TokenBalance.prototype.getBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.io.lightcone.data.dex.TokenBalance.prototype.setBalance = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string order_frozen = 3;
 * @return {string}
 */
proto.io.lightcone.data.dex.TokenBalance.prototype.getOrderFrozen = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.io.lightcone.data.dex.TokenBalance.prototype.setOrderFrozen = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string withdraw_frozen = 4;
 * @return {string}
 */
proto.io.lightcone.data.dex.TokenBalance.prototype.getWithdrawFrozen = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.io.lightcone.data.dex.TokenBalance.prototype.setWithdrawFrozen = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.Account = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.lightcone.data.dex.Account.repeatedFields_, null);
};
goog.inherits(proto.io.lightcone.data.dex.Account, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.Account.displayName = 'proto.io.lightcone.data.dex.Account';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.lightcone.data.dex.Account.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.Account.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.Account.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.Account} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.Account.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accountId: (f = msg.getAccountId()) && data_types_pb.AccountID.toObject(includeInstance, f),
    balancesList: jspb.Message.toObjectList(msg.getBalancesList(),
    proto.io.lightcone.data.dex.TokenBalance.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.Account}
 */
proto.io.lightcone.data.dex.Account.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.Account;
  return proto.io.lightcone.data.dex.Account.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.Account} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.Account}
 */
proto.io.lightcone.data.dex.Account.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = new data_types_pb.AccountID;
      reader.readMessage(value,data_types_pb.AccountID.deserializeBinaryFromReader);
      msg.setAccountId(value);
      break;
    case 3:
      var value = new proto.io.lightcone.data.dex.TokenBalance;
      reader.readMessage(value,proto.io.lightcone.data.dex.TokenBalance.deserializeBinaryFromReader);
      msg.addBalances(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.Account.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.Account.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.Account} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.Account.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccountId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      data_types_pb.AccountID.serializeBinaryToWriter
    );
  }
  f = message.getBalancesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.io.lightcone.data.dex.TokenBalance.serializeBinaryToWriter
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.io.lightcone.data.dex.Account.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.io.lightcone.data.dex.Account.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional io.lightcone.data.types.AccountID account_id = 2;
 * @return {?proto.io.lightcone.data.types.AccountID}
 */
proto.io.lightcone.data.dex.Account.prototype.getAccountId = function() {
  return /** @type{?proto.io.lightcone.data.types.AccountID} */ (
    jspb.Message.getWrapperField(this, data_types_pb.AccountID, 2));
};


/** @param {?proto.io.lightcone.data.types.AccountID|undefined} value */
proto.io.lightcone.data.dex.Account.prototype.setAccountId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.io.lightcone.data.dex.Account.prototype.clearAccountId = function() {
  this.setAccountId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.Account.prototype.hasAccountId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated TokenBalance balances = 3;
 * @return {!Array<!proto.io.lightcone.data.dex.TokenBalance>}
 */
proto.io.lightcone.data.dex.Account.prototype.getBalancesList = function() {
  return /** @type{!Array<!proto.io.lightcone.data.dex.TokenBalance>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.lightcone.data.dex.TokenBalance, 3));
};


/** @param {!Array<!proto.io.lightcone.data.dex.TokenBalance>} value */
proto.io.lightcone.data.dex.Account.prototype.setBalancesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.io.lightcone.data.dex.TokenBalance=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.lightcone.data.dex.TokenBalance}
 */
proto.io.lightcone.data.dex.Account.prototype.addBalances = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.io.lightcone.data.dex.TokenBalance, opt_index);
};


proto.io.lightcone.data.dex.Account.prototype.clearBalancesList = function() {
  this.setBalancesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.GetAvailableBalanceReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.lightcone.data.dex.GetAvailableBalanceReq.repeatedFields_, null);
};
goog.inherits(proto.io.lightcone.data.dex.GetAvailableBalanceReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.GetAvailableBalanceReq.displayName = 'proto.io.lightcone.data.dex.GetAvailableBalanceReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.lightcone.data.dex.GetAvailableBalanceReq.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.GetAvailableBalanceReq.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.GetAvailableBalanceReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.GetAvailableBalanceReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetAvailableBalanceReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tokenAddressesList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.GetAvailableBalanceReq}
 */
proto.io.lightcone.data.dex.GetAvailableBalanceReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.GetAvailableBalanceReq;
  return proto.io.lightcone.data.dex.GetAvailableBalanceReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.GetAvailableBalanceReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.GetAvailableBalanceReq}
 */
proto.io.lightcone.data.dex.GetAvailableBalanceReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAccountId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addTokenAddresses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.GetAvailableBalanceReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.GetAvailableBalanceReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.GetAvailableBalanceReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetAvailableBalanceReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTokenAddressesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional uint64 account_id = 1;
 * @return {number}
 */
proto.io.lightcone.data.dex.GetAvailableBalanceReq.prototype.getAccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.GetAvailableBalanceReq.prototype.setAccountId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated string token_addresses = 2;
 * @return {!Array<string>}
 */
proto.io.lightcone.data.dex.GetAvailableBalanceReq.prototype.getTokenAddressesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.io.lightcone.data.dex.GetAvailableBalanceReq.prototype.setTokenAddressesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.io.lightcone.data.dex.GetAvailableBalanceReq.prototype.addTokenAddresses = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.io.lightcone.data.dex.GetAvailableBalanceReq.prototype.clearTokenAddressesList = function() {
  this.setTokenAddressesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.GetAvailableBalanceRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.lightcone.data.dex.GetAvailableBalanceRes.repeatedFields_, null);
};
goog.inherits(proto.io.lightcone.data.dex.GetAvailableBalanceRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.GetAvailableBalanceRes.displayName = 'proto.io.lightcone.data.dex.GetAvailableBalanceRes';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.lightcone.data.dex.GetAvailableBalanceRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.GetAvailableBalanceRes.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.GetAvailableBalanceRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.GetAvailableBalanceRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetAvailableBalanceRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    availableBalancesList: jspb.Message.toObjectList(msg.getAvailableBalancesList(),
    proto.io.lightcone.data.dex.TokenBalance.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.GetAvailableBalanceRes}
 */
proto.io.lightcone.data.dex.GetAvailableBalanceRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.GetAvailableBalanceRes;
  return proto.io.lightcone.data.dex.GetAvailableBalanceRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.GetAvailableBalanceRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.GetAvailableBalanceRes}
 */
proto.io.lightcone.data.dex.GetAvailableBalanceRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.lightcone.data.dex.TokenBalance;
      reader.readMessage(value,proto.io.lightcone.data.dex.TokenBalance.deserializeBinaryFromReader);
      msg.addAvailableBalances(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.GetAvailableBalanceRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.GetAvailableBalanceRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.GetAvailableBalanceRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetAvailableBalanceRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAvailableBalancesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.io.lightcone.data.dex.TokenBalance.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TokenBalance available_balances = 1;
 * @return {!Array<!proto.io.lightcone.data.dex.TokenBalance>}
 */
proto.io.lightcone.data.dex.GetAvailableBalanceRes.prototype.getAvailableBalancesList = function() {
  return /** @type{!Array<!proto.io.lightcone.data.dex.TokenBalance>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.lightcone.data.dex.TokenBalance, 1));
};


/** @param {!Array<!proto.io.lightcone.data.dex.TokenBalance>} value */
proto.io.lightcone.data.dex.GetAvailableBalanceRes.prototype.setAvailableBalancesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.io.lightcone.data.dex.TokenBalance=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.lightcone.data.dex.TokenBalance}
 */
proto.io.lightcone.data.dex.GetAvailableBalanceRes.prototype.addAvailableBalances = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.io.lightcone.data.dex.TokenBalance, opt_index);
};


proto.io.lightcone.data.dex.GetAvailableBalanceRes.prototype.clearAvailableBalancesList = function() {
  this.setAvailableBalancesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.Order = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.lightcone.data.dex.Order, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.Order.displayName = 'proto.io.lightcone.data.dex.Order';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.Order.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.Order.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.Order} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.Order.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    isSell: jspb.Message.getFieldWithDefault(msg, 2, false),
    baseTokenId: (f = msg.getBaseTokenId()) && data_types_pb.TokenID.toObject(includeInstance, f),
    baseAmount: jspb.Message.getFieldWithDefault(msg, 4, ""),
    baseFillAmount: jspb.Message.getFieldWithDefault(msg, 5, ""),
    quoteSymbol: jspb.Message.getFieldWithDefault(msg, 6, ""),
    quoteAmount: jspb.Message.getFieldWithDefault(msg, 7, ""),
    quoteFillAmount: jspb.Message.getFieldWithDefault(msg, 8, ""),
    status: jspb.Message.getFieldWithDefault(msg, 9, 0),
    submittedAt: jspb.Message.getFieldWithDefault(msg, 10, 0),
    processedAt: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.Order}
 */
proto.io.lightcone.data.dex.Order.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.Order;
  return proto.io.lightcone.data.dex.Order.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.Order} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.Order}
 */
proto.io.lightcone.data.dex.Order.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSell(value);
      break;
    case 3:
      var value = new data_types_pb.TokenID;
      reader.readMessage(value,data_types_pb.TokenID.deserializeBinaryFromReader);
      msg.setBaseTokenId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBaseAmount(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBaseFillAmount(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuoteSymbol(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuoteAmount(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuoteFillAmount(value);
      break;
    case 9:
      var value = /** @type {!proto.io.lightcone.data.types.OrderStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubmittedAt(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setProcessedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.Order.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.Order.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.Order} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.Order.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getIsSell();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getBaseTokenId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      data_types_pb.TokenID.serializeBinaryToWriter
    );
  }
  f = message.getBaseAmount();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBaseFillAmount();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getQuoteSymbol();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getQuoteAmount();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getQuoteFillAmount();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getSubmittedAt();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getProcessedAt();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
};


/**
 * optional uint64 uuid = 1;
 * @return {number}
 */
proto.io.lightcone.data.dex.Order.prototype.getUuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.Order.prototype.setUuid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool is_sell = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.Order.prototype.getIsSell = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.io.lightcone.data.dex.Order.prototype.setIsSell = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional io.lightcone.data.types.TokenID base_token_id = 3;
 * @return {?proto.io.lightcone.data.types.TokenID}
 */
proto.io.lightcone.data.dex.Order.prototype.getBaseTokenId = function() {
  return /** @type{?proto.io.lightcone.data.types.TokenID} */ (
    jspb.Message.getWrapperField(this, data_types_pb.TokenID, 3));
};


/** @param {?proto.io.lightcone.data.types.TokenID|undefined} value */
proto.io.lightcone.data.dex.Order.prototype.setBaseTokenId = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.io.lightcone.data.dex.Order.prototype.clearBaseTokenId = function() {
  this.setBaseTokenId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.Order.prototype.hasBaseTokenId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string base_amount = 4;
 * @return {string}
 */
proto.io.lightcone.data.dex.Order.prototype.getBaseAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.io.lightcone.data.dex.Order.prototype.setBaseAmount = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string base_fill_amount = 5;
 * @return {string}
 */
proto.io.lightcone.data.dex.Order.prototype.getBaseFillAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.io.lightcone.data.dex.Order.prototype.setBaseFillAmount = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string quote_symbol = 6;
 * @return {string}
 */
proto.io.lightcone.data.dex.Order.prototype.getQuoteSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.io.lightcone.data.dex.Order.prototype.setQuoteSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string quote_amount = 7;
 * @return {string}
 */
proto.io.lightcone.data.dex.Order.prototype.getQuoteAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.io.lightcone.data.dex.Order.prototype.setQuoteAmount = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string quote_fill_amount = 8;
 * @return {string}
 */
proto.io.lightcone.data.dex.Order.prototype.getQuoteFillAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.io.lightcone.data.dex.Order.prototype.setQuoteFillAmount = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional io.lightcone.data.types.OrderStatus status = 9;
 * @return {!proto.io.lightcone.data.types.OrderStatus}
 */
proto.io.lightcone.data.dex.Order.prototype.getStatus = function() {
  return /** @type {!proto.io.lightcone.data.types.OrderStatus} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {!proto.io.lightcone.data.types.OrderStatus} value */
proto.io.lightcone.data.dex.Order.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional uint64 submitted_at = 10;
 * @return {number}
 */
proto.io.lightcone.data.dex.Order.prototype.getSubmittedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.Order.prototype.setSubmittedAt = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint64 processed_at = 11;
 * @return {number}
 */
proto.io.lightcone.data.dex.Order.prototype.getProcessedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.Order.prototype.setProcessedAt = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.GetUserOrdersReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.lightcone.data.dex.GetUserOrdersReq.repeatedFields_, null);
};
goog.inherits(proto.io.lightcone.data.dex.GetUserOrdersReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.GetUserOrdersReq.displayName = 'proto.io.lightcone.data.dex.GetUserOrdersReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.lightcone.data.dex.GetUserOrdersReq.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.GetUserOrdersReq.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.GetUserOrdersReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.GetUserOrdersReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetUserOrdersReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    baseTokenId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    quoteTokenId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    paging: (f = msg.getPaging()) && data_types_pb.CursorPaging.toObject(includeInstance, f),
    statusesList: jspb.Message.getRepeatedField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.GetUserOrdersReq}
 */
proto.io.lightcone.data.dex.GetUserOrdersReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.GetUserOrdersReq;
  return proto.io.lightcone.data.dex.GetUserOrdersReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.GetUserOrdersReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.GetUserOrdersReq}
 */
proto.io.lightcone.data.dex.GetUserOrdersReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAccountId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBaseTokenId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuoteTokenId(value);
      break;
    case 4:
      var value = new data_types_pb.CursorPaging;
      reader.readMessage(value,data_types_pb.CursorPaging.deserializeBinaryFromReader);
      msg.setPaging(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addStatuses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.GetUserOrdersReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.GetUserOrdersReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.GetUserOrdersReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetUserOrdersReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getBaseTokenId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getQuoteTokenId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPaging();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      data_types_pb.CursorPaging.serializeBinaryToWriter
    );
  }
  f = message.getStatusesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * optional uint64 account_id = 1;
 * @return {number}
 */
proto.io.lightcone.data.dex.GetUserOrdersReq.prototype.getAccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.GetUserOrdersReq.prototype.setAccountId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string base_token_id = 2;
 * @return {string}
 */
proto.io.lightcone.data.dex.GetUserOrdersReq.prototype.getBaseTokenId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.io.lightcone.data.dex.GetUserOrdersReq.prototype.setBaseTokenId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string quote_token_id = 3;
 * @return {string}
 */
proto.io.lightcone.data.dex.GetUserOrdersReq.prototype.getQuoteTokenId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.io.lightcone.data.dex.GetUserOrdersReq.prototype.setQuoteTokenId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional io.lightcone.data.types.CursorPaging paging = 4;
 * @return {?proto.io.lightcone.data.types.CursorPaging}
 */
proto.io.lightcone.data.dex.GetUserOrdersReq.prototype.getPaging = function() {
  return /** @type{?proto.io.lightcone.data.types.CursorPaging} */ (
    jspb.Message.getWrapperField(this, data_types_pb.CursorPaging, 4));
};


/** @param {?proto.io.lightcone.data.types.CursorPaging|undefined} value */
proto.io.lightcone.data.dex.GetUserOrdersReq.prototype.setPaging = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.io.lightcone.data.dex.GetUserOrdersReq.prototype.clearPaging = function() {
  this.setPaging(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.GetUserOrdersReq.prototype.hasPaging = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated string statuses = 5;
 * @return {!Array<string>}
 */
proto.io.lightcone.data.dex.GetUserOrdersReq.prototype.getStatusesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<string>} value */
proto.io.lightcone.data.dex.GetUserOrdersReq.prototype.setStatusesList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.io.lightcone.data.dex.GetUserOrdersReq.prototype.addStatuses = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.io.lightcone.data.dex.GetUserOrdersReq.prototype.clearStatusesList = function() {
  this.setStatusesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.GetUserOrdersRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.lightcone.data.dex.GetUserOrdersRes.repeatedFields_, null);
};
goog.inherits(proto.io.lightcone.data.dex.GetUserOrdersRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.GetUserOrdersRes.displayName = 'proto.io.lightcone.data.dex.GetUserOrdersRes';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.lightcone.data.dex.GetUserOrdersRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.GetUserOrdersRes.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.GetUserOrdersRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.GetUserOrdersRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetUserOrdersRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    proto.io.lightcone.data.dex.Order.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.GetUserOrdersRes}
 */
proto.io.lightcone.data.dex.GetUserOrdersRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.GetUserOrdersRes;
  return proto.io.lightcone.data.dex.GetUserOrdersRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.GetUserOrdersRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.GetUserOrdersRes}
 */
proto.io.lightcone.data.dex.GetUserOrdersRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.lightcone.data.dex.Order;
      reader.readMessage(value,proto.io.lightcone.data.dex.Order.deserializeBinaryFromReader);
      msg.addOrders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.GetUserOrdersRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.GetUserOrdersRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.GetUserOrdersRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetUserOrdersRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.io.lightcone.data.dex.Order.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Order orders = 1;
 * @return {!Array<!proto.io.lightcone.data.dex.Order>}
 */
proto.io.lightcone.data.dex.GetUserOrdersRes.prototype.getOrdersList = function() {
  return /** @type{!Array<!proto.io.lightcone.data.dex.Order>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.lightcone.data.dex.Order, 1));
};


/** @param {!Array<!proto.io.lightcone.data.dex.Order>} value */
proto.io.lightcone.data.dex.GetUserOrdersRes.prototype.setOrdersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.io.lightcone.data.dex.Order=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.lightcone.data.dex.Order}
 */
proto.io.lightcone.data.dex.GetUserOrdersRes.prototype.addOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.io.lightcone.data.dex.Order, opt_index);
};


proto.io.lightcone.data.dex.GetUserOrdersRes.prototype.clearOrdersList = function() {
  this.setOrdersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.Fill = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.lightcone.data.dex.Fill, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.Fill.displayName = 'proto.io.lightcone.data.dex.Fill';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.Fill.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.Fill.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.Fill} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.Fill.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    orderUuid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    isTaker: jspb.Message.getFieldWithDefault(msg, 3, false),
    isSell: jspb.Message.getFieldWithDefault(msg, 4, false),
    baseTokenId: (f = msg.getBaseTokenId()) && data_types_pb.TokenID.toObject(includeInstance, f),
    baseFillAmount: jspb.Message.getFieldWithDefault(msg, 6, ""),
    quoteTokenId: (f = msg.getQuoteTokenId()) && data_types_pb.TokenID.toObject(includeInstance, f),
    quoteFillAmount: jspb.Message.getFieldWithDefault(msg, 8, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.Fill}
 */
proto.io.lightcone.data.dex.Fill.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.Fill;
  return proto.io.lightcone.data.dex.Fill.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.Fill} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.Fill}
 */
proto.io.lightcone.data.dex.Fill.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOrderUuid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsTaker(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSell(value);
      break;
    case 5:
      var value = new data_types_pb.TokenID;
      reader.readMessage(value,data_types_pb.TokenID.deserializeBinaryFromReader);
      msg.setBaseTokenId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setBaseFillAmount(value);
      break;
    case 7:
      var value = new data_types_pb.TokenID;
      reader.readMessage(value,data_types_pb.TokenID.deserializeBinaryFromReader);
      msg.setQuoteTokenId(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuoteFillAmount(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.Fill.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.Fill.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.Fill} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.Fill.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getOrderUuid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getIsTaker();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getIsSell();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getBaseTokenId();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      data_types_pb.TokenID.serializeBinaryToWriter
    );
  }
  f = message.getBaseFillAmount();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getQuoteTokenId();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      data_types_pb.TokenID.serializeBinaryToWriter
    );
  }
  f = message.getQuoteFillAmount();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
};


/**
 * optional uint64 uuid = 1;
 * @return {number}
 */
proto.io.lightcone.data.dex.Fill.prototype.getUuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.Fill.prototype.setUuid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 order_uuid = 2;
 * @return {number}
 */
proto.io.lightcone.data.dex.Fill.prototype.getOrderUuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.Fill.prototype.setOrderUuid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool is_taker = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.Fill.prototype.getIsTaker = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.io.lightcone.data.dex.Fill.prototype.setIsTaker = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool is_sell = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.Fill.prototype.getIsSell = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.io.lightcone.data.dex.Fill.prototype.setIsSell = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional io.lightcone.data.types.TokenID base_token_id = 5;
 * @return {?proto.io.lightcone.data.types.TokenID}
 */
proto.io.lightcone.data.dex.Fill.prototype.getBaseTokenId = function() {
  return /** @type{?proto.io.lightcone.data.types.TokenID} */ (
    jspb.Message.getWrapperField(this, data_types_pb.TokenID, 5));
};


/** @param {?proto.io.lightcone.data.types.TokenID|undefined} value */
proto.io.lightcone.data.dex.Fill.prototype.setBaseTokenId = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.io.lightcone.data.dex.Fill.prototype.clearBaseTokenId = function() {
  this.setBaseTokenId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.Fill.prototype.hasBaseTokenId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string base_fill_amount = 6;
 * @return {string}
 */
proto.io.lightcone.data.dex.Fill.prototype.getBaseFillAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.io.lightcone.data.dex.Fill.prototype.setBaseFillAmount = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional io.lightcone.data.types.TokenID quote_token_id = 7;
 * @return {?proto.io.lightcone.data.types.TokenID}
 */
proto.io.lightcone.data.dex.Fill.prototype.getQuoteTokenId = function() {
  return /** @type{?proto.io.lightcone.data.types.TokenID} */ (
    jspb.Message.getWrapperField(this, data_types_pb.TokenID, 7));
};


/** @param {?proto.io.lightcone.data.types.TokenID|undefined} value */
proto.io.lightcone.data.dex.Fill.prototype.setQuoteTokenId = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.io.lightcone.data.dex.Fill.prototype.clearQuoteTokenId = function() {
  this.setQuoteTokenId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.Fill.prototype.hasQuoteTokenId = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string quote_fill_amount = 8;
 * @return {string}
 */
proto.io.lightcone.data.dex.Fill.prototype.getQuoteFillAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.io.lightcone.data.dex.Fill.prototype.setQuoteFillAmount = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional uint64 timestamp = 9;
 * @return {number}
 */
proto.io.lightcone.data.dex.Fill.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.Fill.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.MarketTicker = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.lightcone.data.dex.MarketTicker, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.MarketTicker.displayName = 'proto.io.lightcone.data.dex.MarketTicker';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.MarketTicker.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.MarketTicker.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.MarketTicker} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.MarketTicker.toObject = function(includeInstance, msg) {
  var f, obj = {
    baseTokenId: (f = msg.getBaseTokenId()) && data_types_pb.TokenID.toObject(includeInstance, f),
    quoteTokenId: (f = msg.getQuoteTokenId()) && data_types_pb.TokenID.toObject(includeInstance, f),
    exchangeRate: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    price: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    volume24h: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    percentChange1h: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    percentChange24h: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    percentChange7d: +jspb.Message.getFieldWithDefault(msg, 8, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.MarketTicker}
 */
proto.io.lightcone.data.dex.MarketTicker.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.MarketTicker;
  return proto.io.lightcone.data.dex.MarketTicker.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.MarketTicker} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.MarketTicker}
 */
proto.io.lightcone.data.dex.MarketTicker.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new data_types_pb.TokenID;
      reader.readMessage(value,data_types_pb.TokenID.deserializeBinaryFromReader);
      msg.setBaseTokenId(value);
      break;
    case 2:
      var value = new data_types_pb.TokenID;
      reader.readMessage(value,data_types_pb.TokenID.deserializeBinaryFromReader);
      msg.setQuoteTokenId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setExchangeRate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVolume24h(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPercentChange1h(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPercentChange24h(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPercentChange7d(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.MarketTicker.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.MarketTicker.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.MarketTicker} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.MarketTicker.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBaseTokenId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      data_types_pb.TokenID.serializeBinaryToWriter
    );
  }
  f = message.getQuoteTokenId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      data_types_pb.TokenID.serializeBinaryToWriter
    );
  }
  f = message.getExchangeRate();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getVolume24h();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getPercentChange1h();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getPercentChange24h();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getPercentChange7d();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
};


/**
 * optional io.lightcone.data.types.TokenID base_token_id = 1;
 * @return {?proto.io.lightcone.data.types.TokenID}
 */
proto.io.lightcone.data.dex.MarketTicker.prototype.getBaseTokenId = function() {
  return /** @type{?proto.io.lightcone.data.types.TokenID} */ (
    jspb.Message.getWrapperField(this, data_types_pb.TokenID, 1));
};


/** @param {?proto.io.lightcone.data.types.TokenID|undefined} value */
proto.io.lightcone.data.dex.MarketTicker.prototype.setBaseTokenId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.io.lightcone.data.dex.MarketTicker.prototype.clearBaseTokenId = function() {
  this.setBaseTokenId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.MarketTicker.prototype.hasBaseTokenId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional io.lightcone.data.types.TokenID quote_token_id = 2;
 * @return {?proto.io.lightcone.data.types.TokenID}
 */
proto.io.lightcone.data.dex.MarketTicker.prototype.getQuoteTokenId = function() {
  return /** @type{?proto.io.lightcone.data.types.TokenID} */ (
    jspb.Message.getWrapperField(this, data_types_pb.TokenID, 2));
};


/** @param {?proto.io.lightcone.data.types.TokenID|undefined} value */
proto.io.lightcone.data.dex.MarketTicker.prototype.setQuoteTokenId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.io.lightcone.data.dex.MarketTicker.prototype.clearQuoteTokenId = function() {
  this.setQuoteTokenId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.MarketTicker.prototype.hasQuoteTokenId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double exchange_rate = 3;
 * @return {number}
 */
proto.io.lightcone.data.dex.MarketTicker.prototype.getExchangeRate = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.MarketTicker.prototype.setExchangeRate = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double price = 4;
 * @return {number}
 */
proto.io.lightcone.data.dex.MarketTicker.prototype.getPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.MarketTicker.prototype.setPrice = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double volume_24h = 5;
 * @return {number}
 */
proto.io.lightcone.data.dex.MarketTicker.prototype.getVolume24h = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.MarketTicker.prototype.setVolume24h = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double percent_change_1h = 6;
 * @return {number}
 */
proto.io.lightcone.data.dex.MarketTicker.prototype.getPercentChange1h = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.MarketTicker.prototype.setPercentChange1h = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double percent_change_24h = 7;
 * @return {number}
 */
proto.io.lightcone.data.dex.MarketTicker.prototype.getPercentChange24h = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.MarketTicker.prototype.setPercentChange24h = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double percent_change_7d = 8;
 * @return {number}
 */
proto.io.lightcone.data.dex.MarketTicker.prototype.getPercentChange7d = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.MarketTicker.prototype.setPercentChange7d = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.UserTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.lightcone.data.dex.UserTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.UserTransaction.displayName = 'proto.io.lightcone.data.dex.UserTransaction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.UserTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.UserTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.UserTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.UserTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    accountId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tokenId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 4, ""),
    submittedAt: jspb.Message.getFieldWithDefault(msg, 5, 0),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 6, 0),
    txStatus: jspb.Message.getFieldWithDefault(msg, 7, 0),
    txType: jspb.Message.getFieldWithDefault(msg, 8, 0),
    txHash: (f = msg.getTxHash()) && data_types_pb.SHA256Hash.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.UserTransaction}
 */
proto.io.lightcone.data.dex.UserTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.UserTransaction;
  return proto.io.lightcone.data.dex.UserTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.UserTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.UserTransaction}
 */
proto.io.lightcone.data.dex.UserTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAccountId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTokenId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubmittedAt(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUpdatedAt(value);
      break;
    case 7:
      var value = /** @type {!proto.io.lightcone.data.types.UserTxStatus} */ (reader.readEnum());
      msg.setTxStatus(value);
      break;
    case 8:
      var value = /** @type {!proto.io.lightcone.data.types.UserTxType} */ (reader.readEnum());
      msg.setTxType(value);
      break;
    case 9:
      var value = new data_types_pb.SHA256Hash;
      reader.readMessage(value,data_types_pb.SHA256Hash.deserializeBinaryFromReader);
      msg.setTxHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.UserTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.UserTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.UserTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.UserTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAccountId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTokenId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSubmittedAt();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getTxStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getTxType();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getTxHash();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      data_types_pb.SHA256Hash.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 request_id = 1;
 * @return {number}
 */
proto.io.lightcone.data.dex.UserTransaction.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.UserTransaction.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 account_id = 2;
 * @return {number}
 */
proto.io.lightcone.data.dex.UserTransaction.prototype.getAccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.UserTransaction.prototype.setAccountId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 token_id = 3;
 * @return {number}
 */
proto.io.lightcone.data.dex.UserTransaction.prototype.getTokenId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.UserTransaction.prototype.setTokenId = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string amount = 4;
 * @return {string}
 */
proto.io.lightcone.data.dex.UserTransaction.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.io.lightcone.data.dex.UserTransaction.prototype.setAmount = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 submitted_at = 5;
 * @return {number}
 */
proto.io.lightcone.data.dex.UserTransaction.prototype.getSubmittedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.UserTransaction.prototype.setSubmittedAt = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 updated_at = 6;
 * @return {number}
 */
proto.io.lightcone.data.dex.UserTransaction.prototype.getUpdatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.UserTransaction.prototype.setUpdatedAt = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional io.lightcone.data.types.UserTxStatus tx_status = 7;
 * @return {!proto.io.lightcone.data.types.UserTxStatus}
 */
proto.io.lightcone.data.dex.UserTransaction.prototype.getTxStatus = function() {
  return /** @type {!proto.io.lightcone.data.types.UserTxStatus} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.io.lightcone.data.types.UserTxStatus} value */
proto.io.lightcone.data.dex.UserTransaction.prototype.setTxStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional io.lightcone.data.types.UserTxType tx_type = 8;
 * @return {!proto.io.lightcone.data.types.UserTxType}
 */
proto.io.lightcone.data.dex.UserTransaction.prototype.getTxType = function() {
  return /** @type {!proto.io.lightcone.data.types.UserTxType} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.io.lightcone.data.types.UserTxType} value */
proto.io.lightcone.data.dex.UserTransaction.prototype.setTxType = function(value) {
  jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional io.lightcone.data.types.SHA256Hash tx_hash = 9;
 * @return {?proto.io.lightcone.data.types.SHA256Hash}
 */
proto.io.lightcone.data.dex.UserTransaction.prototype.getTxHash = function() {
  return /** @type{?proto.io.lightcone.data.types.SHA256Hash} */ (
    jspb.Message.getWrapperField(this, data_types_pb.SHA256Hash, 9));
};


/** @param {?proto.io.lightcone.data.types.SHA256Hash|undefined} value */
proto.io.lightcone.data.dex.UserTransaction.prototype.setTxHash = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.io.lightcone.data.dex.UserTransaction.prototype.clearTxHash = function() {
  this.setTxHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.UserTransaction.prototype.hasTxHash = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.GetUserFillsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.lightcone.data.dex.GetUserFillsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.GetUserFillsReq.displayName = 'proto.io.lightcone.data.dex.GetUserFillsReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.GetUserFillsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.GetUserFillsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.GetUserFillsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetUserFillsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    orderUuid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    paging: (f = msg.getPaging()) && data_types_pb.CursorPaging.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.GetUserFillsReq}
 */
proto.io.lightcone.data.dex.GetUserFillsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.GetUserFillsReq;
  return proto.io.lightcone.data.dex.GetUserFillsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.GetUserFillsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.GetUserFillsReq}
 */
proto.io.lightcone.data.dex.GetUserFillsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAccountId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOrderUuid(value);
      break;
    case 3:
      var value = new data_types_pb.CursorPaging;
      reader.readMessage(value,data_types_pb.CursorPaging.deserializeBinaryFromReader);
      msg.setPaging(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.GetUserFillsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.GetUserFillsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.GetUserFillsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetUserFillsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getOrderUuid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getPaging();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      data_types_pb.CursorPaging.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 account_id = 1;
 * @return {number}
 */
proto.io.lightcone.data.dex.GetUserFillsReq.prototype.getAccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.GetUserFillsReq.prototype.setAccountId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 order_uuid = 2;
 * @return {number}
 */
proto.io.lightcone.data.dex.GetUserFillsReq.prototype.getOrderUuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.GetUserFillsReq.prototype.setOrderUuid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional io.lightcone.data.types.CursorPaging paging = 3;
 * @return {?proto.io.lightcone.data.types.CursorPaging}
 */
proto.io.lightcone.data.dex.GetUserFillsReq.prototype.getPaging = function() {
  return /** @type{?proto.io.lightcone.data.types.CursorPaging} */ (
    jspb.Message.getWrapperField(this, data_types_pb.CursorPaging, 3));
};


/** @param {?proto.io.lightcone.data.types.CursorPaging|undefined} value */
proto.io.lightcone.data.dex.GetUserFillsReq.prototype.setPaging = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.io.lightcone.data.dex.GetUserFillsReq.prototype.clearPaging = function() {
  this.setPaging(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.GetUserFillsReq.prototype.hasPaging = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.GetMarketFillsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.lightcone.data.dex.GetMarketFillsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.GetMarketFillsReq.displayName = 'proto.io.lightcone.data.dex.GetMarketFillsReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.GetMarketFillsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.GetMarketFillsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.GetMarketFillsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetMarketFillsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    num: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.GetMarketFillsReq}
 */
proto.io.lightcone.data.dex.GetMarketFillsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.GetMarketFillsReq;
  return proto.io.lightcone.data.dex.GetMarketFillsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.GetMarketFillsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.GetMarketFillsReq}
 */
proto.io.lightcone.data.dex.GetMarketFillsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.GetMarketFillsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.GetMarketFillsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.GetMarketFillsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetMarketFillsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getNum();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint64 market_id = 1;
 * @return {number}
 */
proto.io.lightcone.data.dex.GetMarketFillsReq.prototype.getMarketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.GetMarketFillsReq.prototype.setMarketId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 num = 2;
 * @return {number}
 */
proto.io.lightcone.data.dex.GetMarketFillsReq.prototype.getNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.GetMarketFillsReq.prototype.setNum = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.GetFillsRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.lightcone.data.dex.GetFillsRes.repeatedFields_, null);
};
goog.inherits(proto.io.lightcone.data.dex.GetFillsRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.GetFillsRes.displayName = 'proto.io.lightcone.data.dex.GetFillsRes';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.lightcone.data.dex.GetFillsRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.GetFillsRes.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.GetFillsRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.GetFillsRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetFillsRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    fillsList: jspb.Message.toObjectList(msg.getFillsList(),
    proto.io.lightcone.data.dex.Fill.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.GetFillsRes}
 */
proto.io.lightcone.data.dex.GetFillsRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.GetFillsRes;
  return proto.io.lightcone.data.dex.GetFillsRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.GetFillsRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.GetFillsRes}
 */
proto.io.lightcone.data.dex.GetFillsRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.lightcone.data.dex.Fill;
      reader.readMessage(value,proto.io.lightcone.data.dex.Fill.deserializeBinaryFromReader);
      msg.addFills(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.GetFillsRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.GetFillsRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.GetFillsRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetFillsRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFillsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.io.lightcone.data.dex.Fill.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Fill fills = 1;
 * @return {!Array<!proto.io.lightcone.data.dex.Fill>}
 */
proto.io.lightcone.data.dex.GetFillsRes.prototype.getFillsList = function() {
  return /** @type{!Array<!proto.io.lightcone.data.dex.Fill>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.lightcone.data.dex.Fill, 1));
};


/** @param {!Array<!proto.io.lightcone.data.dex.Fill>} value */
proto.io.lightcone.data.dex.GetFillsRes.prototype.setFillsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.io.lightcone.data.dex.Fill=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.lightcone.data.dex.Fill}
 */
proto.io.lightcone.data.dex.GetFillsRes.prototype.addFills = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.io.lightcone.data.dex.Fill, opt_index);
};


proto.io.lightcone.data.dex.GetFillsRes.prototype.clearFillsList = function() {
  this.setFillsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.OrderBook = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.lightcone.data.dex.OrderBook.repeatedFields_, null);
};
goog.inherits(proto.io.lightcone.data.dex.OrderBook, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.OrderBook.displayName = 'proto.io.lightcone.data.dex.OrderBook';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.lightcone.data.dex.OrderBook.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.OrderBook.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.OrderBook.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.OrderBook} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.OrderBook.toObject = function(includeInstance, msg) {
  var f, obj = {
    lastPrice: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lastPriceFiat: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sellsList: jspb.Message.toObjectList(msg.getSellsList(),
    proto.io.lightcone.data.dex.OrderBook.Item.toObject, includeInstance),
    buysList: jspb.Message.toObjectList(msg.getBuysList(),
    proto.io.lightcone.data.dex.OrderBook.Item.toObject, includeInstance),
    baseTokenId: (f = msg.getBaseTokenId()) && data_types_pb.TokenID.toObject(includeInstance, f),
    quoteTokenId: (f = msg.getQuoteTokenId()) && data_types_pb.TokenID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.OrderBook}
 */
proto.io.lightcone.data.dex.OrderBook.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.OrderBook;
  return proto.io.lightcone.data.dex.OrderBook.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.OrderBook} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.OrderBook}
 */
proto.io.lightcone.data.dex.OrderBook.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastPrice(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastPriceFiat(value);
      break;
    case 3:
      var value = new proto.io.lightcone.data.dex.OrderBook.Item;
      reader.readMessage(value,proto.io.lightcone.data.dex.OrderBook.Item.deserializeBinaryFromReader);
      msg.addSells(value);
      break;
    case 4:
      var value = new proto.io.lightcone.data.dex.OrderBook.Item;
      reader.readMessage(value,proto.io.lightcone.data.dex.OrderBook.Item.deserializeBinaryFromReader);
      msg.addBuys(value);
      break;
    case 5:
      var value = new data_types_pb.TokenID;
      reader.readMessage(value,data_types_pb.TokenID.deserializeBinaryFromReader);
      msg.setBaseTokenId(value);
      break;
    case 6:
      var value = new data_types_pb.TokenID;
      reader.readMessage(value,data_types_pb.TokenID.deserializeBinaryFromReader);
      msg.setQuoteTokenId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.OrderBook.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.OrderBook.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.OrderBook} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.OrderBook.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLastPrice();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLastPriceFiat();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSellsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.io.lightcone.data.dex.OrderBook.Item.serializeBinaryToWriter
    );
  }
  f = message.getBuysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.io.lightcone.data.dex.OrderBook.Item.serializeBinaryToWriter
    );
  }
  f = message.getBaseTokenId();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      data_types_pb.TokenID.serializeBinaryToWriter
    );
  }
  f = message.getQuoteTokenId();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      data_types_pb.TokenID.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.OrderBook.Item = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.lightcone.data.dex.OrderBook.Item, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.OrderBook.Item.displayName = 'proto.io.lightcone.data.dex.OrderBook.Item';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.OrderBook.Item.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.OrderBook.Item.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.OrderBook.Item} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.OrderBook.Item.toObject = function(includeInstance, msg) {
  var f, obj = {
    price: jspb.Message.getFieldWithDefault(msg, 1, ""),
    baseAmount: jspb.Message.getFieldWithDefault(msg, 2, ""),
    quoteAmount: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.OrderBook.Item}
 */
proto.io.lightcone.data.dex.OrderBook.Item.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.OrderBook.Item;
  return proto.io.lightcone.data.dex.OrderBook.Item.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.OrderBook.Item} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.OrderBook.Item}
 */
proto.io.lightcone.data.dex.OrderBook.Item.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBaseAmount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuoteAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.OrderBook.Item.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.OrderBook.Item.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.OrderBook.Item} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.OrderBook.Item.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrice();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBaseAmount();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getQuoteAmount();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string price = 1;
 * @return {string}
 */
proto.io.lightcone.data.dex.OrderBook.Item.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.io.lightcone.data.dex.OrderBook.Item.prototype.setPrice = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string base_amount = 2;
 * @return {string}
 */
proto.io.lightcone.data.dex.OrderBook.Item.prototype.getBaseAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.io.lightcone.data.dex.OrderBook.Item.prototype.setBaseAmount = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string quote_amount = 3;
 * @return {string}
 */
proto.io.lightcone.data.dex.OrderBook.Item.prototype.getQuoteAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.io.lightcone.data.dex.OrderBook.Item.prototype.setQuoteAmount = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.OrderBook.Update = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.lightcone.data.dex.OrderBook.Update.repeatedFields_, null);
};
goog.inherits(proto.io.lightcone.data.dex.OrderBook.Update, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.OrderBook.Update.displayName = 'proto.io.lightcone.data.dex.OrderBook.Update';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.lightcone.data.dex.OrderBook.Update.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.OrderBook.Update.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.OrderBook.Update.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.OrderBook.Update} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.OrderBook.Update.toObject = function(includeInstance, msg) {
  var f, obj = {
    level: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sellsList: jspb.Message.toObjectList(msg.getSellsList(),
    proto.io.lightcone.data.dex.OrderBook.Item.toObject, includeInstance),
    buysList: jspb.Message.toObjectList(msg.getBuysList(),
    proto.io.lightcone.data.dex.OrderBook.Item.toObject, includeInstance),
    latestPrice: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    marketId: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.OrderBook.Update}
 */
proto.io.lightcone.data.dex.OrderBook.Update.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.OrderBook.Update;
  return proto.io.lightcone.data.dex.OrderBook.Update.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.OrderBook.Update} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.OrderBook.Update}
 */
proto.io.lightcone.data.dex.OrderBook.Update.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 2:
      var value = new proto.io.lightcone.data.dex.OrderBook.Item;
      reader.readMessage(value,proto.io.lightcone.data.dex.OrderBook.Item.deserializeBinaryFromReader);
      msg.addSells(value);
      break;
    case 3:
      var value = new proto.io.lightcone.data.dex.OrderBook.Item;
      reader.readMessage(value,proto.io.lightcone.data.dex.OrderBook.Item.deserializeBinaryFromReader);
      msg.addBuys(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatestPrice(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.OrderBook.Update.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.OrderBook.Update.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.OrderBook.Update} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.OrderBook.Update.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSellsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.io.lightcone.data.dex.OrderBook.Item.serializeBinaryToWriter
    );
  }
  f = message.getBuysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.io.lightcone.data.dex.OrderBook.Item.serializeBinaryToWriter
    );
  }
  f = message.getLatestPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getMarketId();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional int32 level = 1;
 * @return {number}
 */
proto.io.lightcone.data.dex.OrderBook.Update.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.OrderBook.Update.prototype.setLevel = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Item sells = 2;
 * @return {!Array<!proto.io.lightcone.data.dex.OrderBook.Item>}
 */
proto.io.lightcone.data.dex.OrderBook.Update.prototype.getSellsList = function() {
  return /** @type{!Array<!proto.io.lightcone.data.dex.OrderBook.Item>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.lightcone.data.dex.OrderBook.Item, 2));
};


/** @param {!Array<!proto.io.lightcone.data.dex.OrderBook.Item>} value */
proto.io.lightcone.data.dex.OrderBook.Update.prototype.setSellsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.io.lightcone.data.dex.OrderBook.Item=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.lightcone.data.dex.OrderBook.Item}
 */
proto.io.lightcone.data.dex.OrderBook.Update.prototype.addSells = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.io.lightcone.data.dex.OrderBook.Item, opt_index);
};


proto.io.lightcone.data.dex.OrderBook.Update.prototype.clearSellsList = function() {
  this.setSellsList([]);
};


/**
 * repeated Item buys = 3;
 * @return {!Array<!proto.io.lightcone.data.dex.OrderBook.Item>}
 */
proto.io.lightcone.data.dex.OrderBook.Update.prototype.getBuysList = function() {
  return /** @type{!Array<!proto.io.lightcone.data.dex.OrderBook.Item>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.lightcone.data.dex.OrderBook.Item, 3));
};


/** @param {!Array<!proto.io.lightcone.data.dex.OrderBook.Item>} value */
proto.io.lightcone.data.dex.OrderBook.Update.prototype.setBuysList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.io.lightcone.data.dex.OrderBook.Item=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.lightcone.data.dex.OrderBook.Item}
 */
proto.io.lightcone.data.dex.OrderBook.Update.prototype.addBuys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.io.lightcone.data.dex.OrderBook.Item, opt_index);
};


proto.io.lightcone.data.dex.OrderBook.Update.prototype.clearBuysList = function() {
  this.setBuysList([]);
};


/**
 * optional double latest_price = 4;
 * @return {number}
 */
proto.io.lightcone.data.dex.OrderBook.Update.prototype.getLatestPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.OrderBook.Update.prototype.setLatestPrice = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional uint64 market_id = 5;
 * @return {number}
 */
proto.io.lightcone.data.dex.OrderBook.Update.prototype.getMarketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.OrderBook.Update.prototype.setMarketId = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string last_price = 1;
 * @return {string}
 */
proto.io.lightcone.data.dex.OrderBook.prototype.getLastPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.io.lightcone.data.dex.OrderBook.prototype.setLastPrice = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string last_price_fiat = 2;
 * @return {string}
 */
proto.io.lightcone.data.dex.OrderBook.prototype.getLastPriceFiat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.io.lightcone.data.dex.OrderBook.prototype.setLastPriceFiat = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Item sells = 3;
 * @return {!Array<!proto.io.lightcone.data.dex.OrderBook.Item>}
 */
proto.io.lightcone.data.dex.OrderBook.prototype.getSellsList = function() {
  return /** @type{!Array<!proto.io.lightcone.data.dex.OrderBook.Item>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.lightcone.data.dex.OrderBook.Item, 3));
};


/** @param {!Array<!proto.io.lightcone.data.dex.OrderBook.Item>} value */
proto.io.lightcone.data.dex.OrderBook.prototype.setSellsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.io.lightcone.data.dex.OrderBook.Item=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.lightcone.data.dex.OrderBook.Item}
 */
proto.io.lightcone.data.dex.OrderBook.prototype.addSells = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.io.lightcone.data.dex.OrderBook.Item, opt_index);
};


proto.io.lightcone.data.dex.OrderBook.prototype.clearSellsList = function() {
  this.setSellsList([]);
};


/**
 * repeated Item buys = 4;
 * @return {!Array<!proto.io.lightcone.data.dex.OrderBook.Item>}
 */
proto.io.lightcone.data.dex.OrderBook.prototype.getBuysList = function() {
  return /** @type{!Array<!proto.io.lightcone.data.dex.OrderBook.Item>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.lightcone.data.dex.OrderBook.Item, 4));
};


/** @param {!Array<!proto.io.lightcone.data.dex.OrderBook.Item>} value */
proto.io.lightcone.data.dex.OrderBook.prototype.setBuysList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.io.lightcone.data.dex.OrderBook.Item=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.lightcone.data.dex.OrderBook.Item}
 */
proto.io.lightcone.data.dex.OrderBook.prototype.addBuys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.io.lightcone.data.dex.OrderBook.Item, opt_index);
};


proto.io.lightcone.data.dex.OrderBook.prototype.clearBuysList = function() {
  this.setBuysList([]);
};


/**
 * optional io.lightcone.data.types.TokenID base_token_id = 5;
 * @return {?proto.io.lightcone.data.types.TokenID}
 */
proto.io.lightcone.data.dex.OrderBook.prototype.getBaseTokenId = function() {
  return /** @type{?proto.io.lightcone.data.types.TokenID} */ (
    jspb.Message.getWrapperField(this, data_types_pb.TokenID, 5));
};


/** @param {?proto.io.lightcone.data.types.TokenID|undefined} value */
proto.io.lightcone.data.dex.OrderBook.prototype.setBaseTokenId = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.io.lightcone.data.dex.OrderBook.prototype.clearBaseTokenId = function() {
  this.setBaseTokenId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.OrderBook.prototype.hasBaseTokenId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional io.lightcone.data.types.TokenID quote_token_id = 6;
 * @return {?proto.io.lightcone.data.types.TokenID}
 */
proto.io.lightcone.data.dex.OrderBook.prototype.getQuoteTokenId = function() {
  return /** @type{?proto.io.lightcone.data.types.TokenID} */ (
    jspb.Message.getWrapperField(this, data_types_pb.TokenID, 6));
};


/** @param {?proto.io.lightcone.data.types.TokenID|undefined} value */
proto.io.lightcone.data.dex.OrderBook.prototype.setQuoteTokenId = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.io.lightcone.data.dex.OrderBook.prototype.clearQuoteTokenId = function() {
  this.setQuoteTokenId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.OrderBook.prototype.hasQuoteTokenId = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.GetOrderBookReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.lightcone.data.dex.GetOrderBookReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.GetOrderBookReq.displayName = 'proto.io.lightcone.data.dex.GetOrderBookReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.GetOrderBookReq.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.GetOrderBookReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.GetOrderBookReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetOrderBookReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    aggregationLevel: jspb.Message.getFieldWithDefault(msg, 2, 0),
    fiatSymbol: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.GetOrderBookReq}
 */
proto.io.lightcone.data.dex.GetOrderBookReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.GetOrderBookReq;
  return proto.io.lightcone.data.dex.GetOrderBookReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.GetOrderBookReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.GetOrderBookReq}
 */
proto.io.lightcone.data.dex.GetOrderBookReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAggregationLevel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFiatSymbol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.GetOrderBookReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.GetOrderBookReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.GetOrderBookReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetOrderBookReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAggregationLevel();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getFiatSymbol();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint64 market_id = 1;
 * @return {number}
 */
proto.io.lightcone.data.dex.GetOrderBookReq.prototype.getMarketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.GetOrderBookReq.prototype.setMarketId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 aggregation_level = 2;
 * @return {number}
 */
proto.io.lightcone.data.dex.GetOrderBookReq.prototype.getAggregationLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.GetOrderBookReq.prototype.setAggregationLevel = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string fiat_symbol = 3;
 * @return {string}
 */
proto.io.lightcone.data.dex.GetOrderBookReq.prototype.getFiatSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.io.lightcone.data.dex.GetOrderBookReq.prototype.setFiatSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.Candles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.lightcone.data.dex.Candles.repeatedFields_, null);
};
goog.inherits(proto.io.lightcone.data.dex.Candles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.Candles.displayName = 'proto.io.lightcone.data.dex.Candles';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.lightcone.data.dex.Candles.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.Candles.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.Candles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.Candles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.Candles.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.io.lightcone.data.dex.Candles.OHLC.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.Candles}
 */
proto.io.lightcone.data.dex.Candles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.Candles;
  return proto.io.lightcone.data.dex.Candles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.Candles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.Candles}
 */
proto.io.lightcone.data.dex.Candles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.lightcone.data.dex.Candles.OHLC;
      reader.readMessage(value,proto.io.lightcone.data.dex.Candles.OHLC.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.Candles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.Candles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.Candles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.Candles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.io.lightcone.data.dex.Candles.OHLC.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.Candles.OHLC = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.lightcone.data.dex.Candles.OHLC.repeatedFields_, null);
};
goog.inherits(proto.io.lightcone.data.dex.Candles.OHLC, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.Candles.OHLC.displayName = 'proto.io.lightcone.data.dex.Candles.OHLC';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.lightcone.data.dex.Candles.OHLC.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.Candles.OHLC.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.Candles.OHLC.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.Candles.OHLC} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.Candles.OHLC.toObject = function(includeInstance, msg) {
  var f, obj = {
    ohlcList: jspb.Message.getRepeatedFloatingPointField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.Candles.OHLC}
 */
proto.io.lightcone.data.dex.Candles.OHLC.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.Candles.OHLC;
  return proto.io.lightcone.data.dex.Candles.OHLC.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.Candles.OHLC} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.Candles.OHLC}
 */
proto.io.lightcone.data.dex.Candles.OHLC.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setOhlcList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.Candles.OHLC.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.Candles.OHLC.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.Candles.OHLC} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.Candles.OHLC.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOhlcList();
  if (f.length > 0) {
    writer.writePackedDouble(
      1,
      f
    );
  }
};


/**
 * repeated double ohlc = 1;
 * @return {!Array<number>}
 */
proto.io.lightcone.data.dex.Candles.OHLC.prototype.getOhlcList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/** @param {!Array<number>} value */
proto.io.lightcone.data.dex.Candles.OHLC.prototype.setOhlcList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.io.lightcone.data.dex.Candles.OHLC.prototype.addOhlc = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.io.lightcone.data.dex.Candles.OHLC.prototype.clearOhlcList = function() {
  this.setOhlcList([]);
};


/**
 * repeated OHLC data = 1;
 * @return {!Array<!proto.io.lightcone.data.dex.Candles.OHLC>}
 */
proto.io.lightcone.data.dex.Candles.prototype.getDataList = function() {
  return /** @type{!Array<!proto.io.lightcone.data.dex.Candles.OHLC>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.lightcone.data.dex.Candles.OHLC, 1));
};


/** @param {!Array<!proto.io.lightcone.data.dex.Candles.OHLC>} value */
proto.io.lightcone.data.dex.Candles.prototype.setDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.io.lightcone.data.dex.Candles.OHLC=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.lightcone.data.dex.Candles.OHLC}
 */
proto.io.lightcone.data.dex.Candles.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.io.lightcone.data.dex.Candles.OHLC, opt_index);
};


proto.io.lightcone.data.dex.Candles.prototype.clearDataList = function() {
  this.setDataList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.GetCandlesReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.lightcone.data.dex.GetCandlesReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.GetCandlesReq.displayName = 'proto.io.lightcone.data.dex.GetCandlesReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.GetCandlesReq.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.GetCandlesReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.GetCandlesReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetCandlesReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    interval: jspb.Message.getFieldWithDefault(msg, 2, 0),
    paging: (f = msg.getPaging()) && data_types_pb.CursorPaging.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.GetCandlesReq}
 */
proto.io.lightcone.data.dex.GetCandlesReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.GetCandlesReq;
  return proto.io.lightcone.data.dex.GetCandlesReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.GetCandlesReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.GetCandlesReq}
 */
proto.io.lightcone.data.dex.GetCandlesReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketId(value);
      break;
    case 2:
      var value = /** @type {!proto.io.lightcone.data.types.Interval} */ (reader.readEnum());
      msg.setInterval(value);
      break;
    case 3:
      var value = new data_types_pb.CursorPaging;
      reader.readMessage(value,data_types_pb.CursorPaging.deserializeBinaryFromReader);
      msg.setPaging(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.GetCandlesReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.GetCandlesReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.GetCandlesReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetCandlesReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getInterval();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getPaging();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      data_types_pb.CursorPaging.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 market_id = 1;
 * @return {number}
 */
proto.io.lightcone.data.dex.GetCandlesReq.prototype.getMarketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.GetCandlesReq.prototype.setMarketId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional io.lightcone.data.types.Interval interval = 2;
 * @return {!proto.io.lightcone.data.types.Interval}
 */
proto.io.lightcone.data.dex.GetCandlesReq.prototype.getInterval = function() {
  return /** @type {!proto.io.lightcone.data.types.Interval} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.io.lightcone.data.types.Interval} value */
proto.io.lightcone.data.dex.GetCandlesReq.prototype.setInterval = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional io.lightcone.data.types.CursorPaging paging = 3;
 * @return {?proto.io.lightcone.data.types.CursorPaging}
 */
proto.io.lightcone.data.dex.GetCandlesReq.prototype.getPaging = function() {
  return /** @type{?proto.io.lightcone.data.types.CursorPaging} */ (
    jspb.Message.getWrapperField(this, data_types_pb.CursorPaging, 3));
};


/** @param {?proto.io.lightcone.data.types.CursorPaging|undefined} value */
proto.io.lightcone.data.dex.GetCandlesReq.prototype.setPaging = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.io.lightcone.data.dex.GetCandlesReq.prototype.clearPaging = function() {
  this.setPaging(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.GetCandlesReq.prototype.hasPaging = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.GetUserTransactionsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.lightcone.data.dex.GetUserTransactionsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.GetUserTransactionsReq.displayName = 'proto.io.lightcone.data.dex.GetUserTransactionsReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.GetUserTransactionsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.GetUserTransactionsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.GetUserTransactionsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetUserTransactionsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tokenId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    transactionType: jspb.Message.getFieldWithDefault(msg, 3, ""),
    paging: (f = msg.getPaging()) && data_types_pb.CursorPaging.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.GetUserTransactionsReq}
 */
proto.io.lightcone.data.dex.GetUserTransactionsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.GetUserTransactionsReq;
  return proto.io.lightcone.data.dex.GetUserTransactionsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.GetUserTransactionsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.GetUserTransactionsReq}
 */
proto.io.lightcone.data.dex.GetUserTransactionsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAccountId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTokenId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionType(value);
      break;
    case 4:
      var value = new data_types_pb.CursorPaging;
      reader.readMessage(value,data_types_pb.CursorPaging.deserializeBinaryFromReader);
      msg.setPaging(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.GetUserTransactionsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.GetUserTransactionsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.GetUserTransactionsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetUserTransactionsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTokenId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTransactionType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPaging();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      data_types_pb.CursorPaging.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 account_id = 1;
 * @return {number}
 */
proto.io.lightcone.data.dex.GetUserTransactionsReq.prototype.getAccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.GetUserTransactionsReq.prototype.setAccountId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 token_id = 2;
 * @return {number}
 */
proto.io.lightcone.data.dex.GetUserTransactionsReq.prototype.getTokenId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.GetUserTransactionsReq.prototype.setTokenId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string transaction_type = 3;
 * @return {string}
 */
proto.io.lightcone.data.dex.GetUserTransactionsReq.prototype.getTransactionType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.io.lightcone.data.dex.GetUserTransactionsReq.prototype.setTransactionType = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional io.lightcone.data.types.CursorPaging paging = 4;
 * @return {?proto.io.lightcone.data.types.CursorPaging}
 */
proto.io.lightcone.data.dex.GetUserTransactionsReq.prototype.getPaging = function() {
  return /** @type{?proto.io.lightcone.data.types.CursorPaging} */ (
    jspb.Message.getWrapperField(this, data_types_pb.CursorPaging, 4));
};


/** @param {?proto.io.lightcone.data.types.CursorPaging|undefined} value */
proto.io.lightcone.data.dex.GetUserTransactionsReq.prototype.setPaging = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.io.lightcone.data.dex.GetUserTransactionsReq.prototype.clearPaging = function() {
  this.setPaging(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.GetUserTransactionsReq.prototype.hasPaging = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.GetUserTransactionsRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.lightcone.data.dex.GetUserTransactionsRes.repeatedFields_, null);
};
goog.inherits(proto.io.lightcone.data.dex.GetUserTransactionsRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.GetUserTransactionsRes.displayName = 'proto.io.lightcone.data.dex.GetUserTransactionsRes';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.lightcone.data.dex.GetUserTransactionsRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.GetUserTransactionsRes.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.GetUserTransactionsRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.GetUserTransactionsRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetUserTransactionsRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    proto.io.lightcone.data.dex.UserTransaction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.GetUserTransactionsRes}
 */
proto.io.lightcone.data.dex.GetUserTransactionsRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.GetUserTransactionsRes;
  return proto.io.lightcone.data.dex.GetUserTransactionsRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.GetUserTransactionsRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.GetUserTransactionsRes}
 */
proto.io.lightcone.data.dex.GetUserTransactionsRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.lightcone.data.dex.UserTransaction;
      reader.readMessage(value,proto.io.lightcone.data.dex.UserTransaction.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.GetUserTransactionsRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.GetUserTransactionsRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.GetUserTransactionsRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetUserTransactionsRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.io.lightcone.data.dex.UserTransaction.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UserTransaction transactions = 1;
 * @return {!Array<!proto.io.lightcone.data.dex.UserTransaction>}
 */
proto.io.lightcone.data.dex.GetUserTransactionsRes.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.io.lightcone.data.dex.UserTransaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.lightcone.data.dex.UserTransaction, 1));
};


/** @param {!Array<!proto.io.lightcone.data.dex.UserTransaction>} value */
proto.io.lightcone.data.dex.GetUserTransactionsRes.prototype.setTransactionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.io.lightcone.data.dex.UserTransaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.lightcone.data.dex.UserTransaction}
 */
proto.io.lightcone.data.dex.GetUserTransactionsRes.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.io.lightcone.data.dex.UserTransaction, opt_index);
};


proto.io.lightcone.data.dex.GetUserTransactionsRes.prototype.clearTransactionsList = function() {
  this.setTransactionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.GetNextOrderIdReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.lightcone.data.dex.GetNextOrderIdReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.GetNextOrderIdReq.displayName = 'proto.io.lightcone.data.dex.GetNextOrderIdReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.GetNextOrderIdReq.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.GetNextOrderIdReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.GetNextOrderIdReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetNextOrderIdReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tokenSellId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.GetNextOrderIdReq}
 */
proto.io.lightcone.data.dex.GetNextOrderIdReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.GetNextOrderIdReq;
  return proto.io.lightcone.data.dex.GetNextOrderIdReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.GetNextOrderIdReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.GetNextOrderIdReq}
 */
proto.io.lightcone.data.dex.GetNextOrderIdReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAccountId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTokenSellId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.GetNextOrderIdReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.GetNextOrderIdReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.GetNextOrderIdReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.GetNextOrderIdReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTokenSellId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint64 account_id = 1;
 * @return {number}
 */
proto.io.lightcone.data.dex.GetNextOrderIdReq.prototype.getAccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.GetNextOrderIdReq.prototype.setAccountId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 token_sell_id = 2;
 * @return {number}
 */
proto.io.lightcone.data.dex.GetNextOrderIdReq.prototype.getTokenSellId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.GetNextOrderIdReq.prototype.setTokenSellId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.SubmitOrderRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.lightcone.data.dex.SubmitOrderRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.SubmitOrderRes.displayName = 'proto.io.lightcone.data.dex.SubmitOrderRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.SubmitOrderRes.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.SubmitOrderRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.SubmitOrderRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.SubmitOrderRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderUuid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.SubmitOrderRes}
 */
proto.io.lightcone.data.dex.SubmitOrderRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.SubmitOrderRes;
  return proto.io.lightcone.data.dex.SubmitOrderRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.SubmitOrderRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.SubmitOrderRes}
 */
proto.io.lightcone.data.dex.SubmitOrderRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOrderUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.SubmitOrderRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.SubmitOrderRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.SubmitOrderRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.SubmitOrderRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderUuid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 order_uuid = 1;
 * @return {number}
 */
proto.io.lightcone.data.dex.SubmitOrderRes.prototype.getOrderUuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.SubmitOrderRes.prototype.setOrderUuid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.CancelOrderRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.lightcone.data.dex.CancelOrderRes.repeatedFields_, null);
};
goog.inherits(proto.io.lightcone.data.dex.CancelOrderRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.CancelOrderRes.displayName = 'proto.io.lightcone.data.dex.CancelOrderRes';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.lightcone.data.dex.CancelOrderRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.CancelOrderRes.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.CancelOrderRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.CancelOrderRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.CancelOrderRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderUuidsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.CancelOrderRes}
 */
proto.io.lightcone.data.dex.CancelOrderRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.CancelOrderRes;
  return proto.io.lightcone.data.dex.CancelOrderRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.CancelOrderRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.CancelOrderRes}
 */
proto.io.lightcone.data.dex.CancelOrderRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
      msg.setOrderUuidsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.CancelOrderRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.CancelOrderRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.CancelOrderRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.CancelOrderRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderUuidsList();
  if (f.length > 0) {
    writer.writePackedUint64(
      1,
      f
    );
  }
};


/**
 * repeated uint64 order_uuids = 1;
 * @return {!Array<number>}
 */
proto.io.lightcone.data.dex.CancelOrderRes.prototype.getOrderUuidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.io.lightcone.data.dex.CancelOrderRes.prototype.setOrderUuidsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.io.lightcone.data.dex.CancelOrderRes.prototype.addOrderUuids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.io.lightcone.data.dex.CancelOrderRes.prototype.clearOrderUuidsList = function() {
  this.setOrderUuidsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.OffchainWithdrawalalRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.lightcone.data.dex.OffchainWithdrawalalRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.OffchainWithdrawalalRes.displayName = 'proto.io.lightcone.data.dex.OffchainWithdrawalalRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.OffchainWithdrawalalRes.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.OffchainWithdrawalalRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.OffchainWithdrawalalRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.OffchainWithdrawalalRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    withdrwalUuid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.OffchainWithdrawalalRes}
 */
proto.io.lightcone.data.dex.OffchainWithdrawalalRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.OffchainWithdrawalalRes;
  return proto.io.lightcone.data.dex.OffchainWithdrawalalRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.OffchainWithdrawalalRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.OffchainWithdrawalalRes}
 */
proto.io.lightcone.data.dex.OffchainWithdrawalalRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setWithdrwalUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.OffchainWithdrawalalRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.OffchainWithdrawalalRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.OffchainWithdrawalalRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.OffchainWithdrawalalRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWithdrwalUuid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 withdrwal_uuid = 1;
 * @return {number}
 */
proto.io.lightcone.data.dex.OffchainWithdrawalalRes.prototype.getWithdrwalUuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.OffchainWithdrawalalRes.prototype.setWithdrwalUuid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.SimpleOrderCancellationReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.lightcone.data.dex.SimpleOrderCancellationReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.SimpleOrderCancellationReq.displayName = 'proto.io.lightcone.data.dex.SimpleOrderCancellationReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.SimpleOrderCancellationReq.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.SimpleOrderCancellationReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.SimpleOrderCancellationReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.SimpleOrderCancellationReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    exchangeId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    accountId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    orderUuid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    marketId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 5, 0),
    sig: (f = msg.getSig()) && data_types_pb.EdDSASignature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.SimpleOrderCancellationReq}
 */
proto.io.lightcone.data.dex.SimpleOrderCancellationReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.SimpleOrderCancellationReq;
  return proto.io.lightcone.data.dex.SimpleOrderCancellationReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.SimpleOrderCancellationReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.SimpleOrderCancellationReq}
 */
proto.io.lightcone.data.dex.SimpleOrderCancellationReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExchangeId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAccountId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOrderUuid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 6:
      var value = new data_types_pb.EdDSASignature;
      reader.readMessage(value,data_types_pb.EdDSASignature.deserializeBinaryFromReader);
      msg.setSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.SimpleOrderCancellationReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.SimpleOrderCancellationReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.SimpleOrderCancellationReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.SimpleOrderCancellationReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExchangeId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAccountId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getOrderUuid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getMarketId();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getSig();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      data_types_pb.EdDSASignature.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 exchange_id = 1;
 * @return {number}
 */
proto.io.lightcone.data.dex.SimpleOrderCancellationReq.prototype.getExchangeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.SimpleOrderCancellationReq.prototype.setExchangeId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 account_id = 2;
 * @return {number}
 */
proto.io.lightcone.data.dex.SimpleOrderCancellationReq.prototype.getAccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.SimpleOrderCancellationReq.prototype.setAccountId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 order_uuid = 3;
 * @return {number}
 */
proto.io.lightcone.data.dex.SimpleOrderCancellationReq.prototype.getOrderUuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.SimpleOrderCancellationReq.prototype.setOrderUuid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 market_id = 4;
 * @return {number}
 */
proto.io.lightcone.data.dex.SimpleOrderCancellationReq.prototype.getMarketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.SimpleOrderCancellationReq.prototype.setMarketId = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 timestamp = 5;
 * @return {number}
 */
proto.io.lightcone.data.dex.SimpleOrderCancellationReq.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.SimpleOrderCancellationReq.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional io.lightcone.data.types.EdDSASignature sig = 6;
 * @return {?proto.io.lightcone.data.types.EdDSASignature}
 */
proto.io.lightcone.data.dex.SimpleOrderCancellationReq.prototype.getSig = function() {
  return /** @type{?proto.io.lightcone.data.types.EdDSASignature} */ (
    jspb.Message.getWrapperField(this, data_types_pb.EdDSASignature, 6));
};


/** @param {?proto.io.lightcone.data.types.EdDSASignature|undefined} value */
proto.io.lightcone.data.dex.SimpleOrderCancellationReq.prototype.setSig = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.io.lightcone.data.dex.SimpleOrderCancellationReq.prototype.clearSig = function() {
  this.setSig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.SimpleOrderCancellationReq.prototype.hasSig = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.SocketIOSubscription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.lightcone.data.dex.SocketIOSubscription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.SocketIOSubscription.displayName = 'proto.io.lightcone.data.dex.SocketIOSubscription';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.SocketIOSubscription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.SocketIOSubscription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.SocketIOSubscription.toObject = function(includeInstance, msg) {
  var f, obj = {
    paramsForOrderbook: (f = msg.getParamsForOrderbook()) && proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook.toObject(includeInstance, f),
    paramsForCandles: (f = msg.getParamsForCandles()) && proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles.toObject(includeInstance, f),
    paramsForFills: (f = msg.getParamsForFills()) && proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills.toObject(includeInstance, f),
    paramsForInternalTickers: (f = msg.getParamsForInternalTickers()) && proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForInternalTickers.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.SocketIOSubscription}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.SocketIOSubscription;
  return proto.io.lightcone.data.dex.SocketIOSubscription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.SocketIOSubscription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.SocketIOSubscription}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook;
      reader.readMessage(value,proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook.deserializeBinaryFromReader);
      msg.setParamsForOrderbook(value);
      break;
    case 2:
      var value = new proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles;
      reader.readMessage(value,proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles.deserializeBinaryFromReader);
      msg.setParamsForCandles(value);
      break;
    case 3:
      var value = new proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills;
      reader.readMessage(value,proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills.deserializeBinaryFromReader);
      msg.setParamsForFills(value);
      break;
    case 4:
      var value = new proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForInternalTickers;
      reader.readMessage(value,proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForInternalTickers.deserializeBinaryFromReader);
      msg.setParamsForInternalTickers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.SocketIOSubscription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.SocketIOSubscription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.SocketIOSubscription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParamsForOrderbook();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook.serializeBinaryToWriter
    );
  }
  f = message.getParamsForCandles();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles.serializeBinaryToWriter
    );
  }
  f = message.getParamsForFills();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills.serializeBinaryToWriter
    );
  }
  f = message.getParamsForInternalTickers();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForInternalTickers.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.SocketIOSubscription.Ack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.lightcone.data.dex.SocketIOSubscription.Ack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.SocketIOSubscription.Ack.displayName = 'proto.io.lightcone.data.dex.SocketIOSubscription.Ack';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.Ack.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.SocketIOSubscription.Ack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.SocketIOSubscription.Ack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.SocketIOSubscription.Ack.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && data_types_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.SocketIOSubscription.Ack}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.Ack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.SocketIOSubscription.Ack;
  return proto.io.lightcone.data.dex.SocketIOSubscription.Ack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.SocketIOSubscription.Ack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.SocketIOSubscription.Ack}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.Ack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new data_types_pb.Error;
      reader.readMessage(value,data_types_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.Ack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.SocketIOSubscription.Ack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.SocketIOSubscription.Ack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.SocketIOSubscription.Ack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      data_types_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional io.lightcone.data.types.Error error = 1;
 * @return {?proto.io.lightcone.data.types.Error}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.Ack.prototype.getError = function() {
  return /** @type{?proto.io.lightcone.data.types.Error} */ (
    jspb.Message.getWrapperField(this, data_types_pb.Error, 1));
};


/** @param {?proto.io.lightcone.data.types.Error|undefined} value */
proto.io.lightcone.data.dex.SocketIOSubscription.Ack.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.io.lightcone.data.dex.SocketIOSubscription.Ack.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.Ack.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills.displayName = 'proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: (f = msg.getAccountId()) && data_types_pb.AccountID.toObject(includeInstance, f),
    marketId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills;
  return proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new data_types_pb.AccountID;
      reader.readMessage(value,data_types_pb.AccountID.deserializeBinaryFromReader);
      msg.setAccountId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      data_types_pb.AccountID.serializeBinaryToWriter
    );
  }
  f = message.getMarketId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional io.lightcone.data.types.AccountID account_id = 1;
 * @return {?proto.io.lightcone.data.types.AccountID}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills.prototype.getAccountId = function() {
  return /** @type{?proto.io.lightcone.data.types.AccountID} */ (
    jspb.Message.getWrapperField(this, data_types_pb.AccountID, 1));
};


/** @param {?proto.io.lightcone.data.types.AccountID|undefined} value */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills.prototype.setAccountId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills.prototype.clearAccountId = function() {
  this.setAccountId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills.prototype.hasAccountId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 market_id = 2;
 * @return {number}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills.prototype.getMarketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills.prototype.setMarketId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForInternalTickers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForInternalTickers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForInternalTickers.displayName = 'proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForInternalTickers';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForInternalTickers.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForInternalTickers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForInternalTickers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForInternalTickers.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForInternalTickers}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForInternalTickers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForInternalTickers;
  return proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForInternalTickers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForInternalTickers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForInternalTickers}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForInternalTickers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForInternalTickers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForInternalTickers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForInternalTickers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForInternalTickers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 market_id = 1;
 * @return {number}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForInternalTickers.prototype.getMarketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForInternalTickers.prototype.setMarketId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook.displayName = 'proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook.toObject = function(includeInstance, msg) {
  var f, obj = {
    level: jspb.Message.getFieldWithDefault(msg, 1, 0),
    marketId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook;
  return proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMarketId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional int32 level = 1;
 * @return {number}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook.prototype.setLevel = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 market_id = 2;
 * @return {number}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook.prototype.getMarketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook.prototype.setMarketId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles.displayName = 'proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    beginTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    endTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    interval: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles;
  return proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBeginTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndTime(value);
      break;
    case 4:
      var value = /** @type {!proto.io.lightcone.data.types.Interval} */ (reader.readEnum());
      msg.setInterval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getBeginTime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getInterval();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional uint64 market_id = 1;
 * @return {number}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles.prototype.getMarketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles.prototype.setMarketId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 begin_time = 2;
 * @return {number}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles.prototype.getBeginTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles.prototype.setBeginTime = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 end_time = 3;
 * @return {number}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles.prototype.setEndTime = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional io.lightcone.data.types.Interval interval = 4;
 * @return {!proto.io.lightcone.data.types.Interval}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles.prototype.getInterval = function() {
  return /** @type {!proto.io.lightcone.data.types.Interval} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.io.lightcone.data.types.Interval} value */
proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles.prototype.setInterval = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.dex.SocketIOSubscription.Notification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.lightcone.data.dex.SocketIOSubscription.Notification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.dex.SocketIOSubscription.Notification.displayName = 'proto.io.lightcone.data.dex.SocketIOSubscription.Notification';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.Notification.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.dex.SocketIOSubscription.Notification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.dex.SocketIOSubscription.Notification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.SocketIOSubscription.Notification.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderbook: (f = msg.getOrderbook()) && proto.io.lightcone.data.dex.OrderBook.Update.toObject(includeInstance, f),
    candles: (f = msg.getCandles()) && proto.io.lightcone.data.dex.Candles.toObject(includeInstance, f),
    fill: (f = msg.getFill()) && proto.io.lightcone.data.dex.Fill.toObject(includeInstance, f),
    internalTicker: (f = msg.getInternalTicker()) && proto.io.lightcone.data.dex.MarketTicker.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.dex.SocketIOSubscription.Notification}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.Notification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.dex.SocketIOSubscription.Notification;
  return proto.io.lightcone.data.dex.SocketIOSubscription.Notification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.dex.SocketIOSubscription.Notification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.dex.SocketIOSubscription.Notification}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.Notification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.lightcone.data.dex.OrderBook.Update;
      reader.readMessage(value,proto.io.lightcone.data.dex.OrderBook.Update.deserializeBinaryFromReader);
      msg.setOrderbook(value);
      break;
    case 2:
      var value = new proto.io.lightcone.data.dex.Candles;
      reader.readMessage(value,proto.io.lightcone.data.dex.Candles.deserializeBinaryFromReader);
      msg.setCandles(value);
      break;
    case 3:
      var value = new proto.io.lightcone.data.dex.Fill;
      reader.readMessage(value,proto.io.lightcone.data.dex.Fill.deserializeBinaryFromReader);
      msg.setFill(value);
      break;
    case 4:
      var value = new proto.io.lightcone.data.dex.MarketTicker;
      reader.readMessage(value,proto.io.lightcone.data.dex.MarketTicker.deserializeBinaryFromReader);
      msg.setInternalTicker(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.Notification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.dex.SocketIOSubscription.Notification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.dex.SocketIOSubscription.Notification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.dex.SocketIOSubscription.Notification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderbook();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.io.lightcone.data.dex.OrderBook.Update.serializeBinaryToWriter
    );
  }
  f = message.getCandles();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.lightcone.data.dex.Candles.serializeBinaryToWriter
    );
  }
  f = message.getFill();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.io.lightcone.data.dex.Fill.serializeBinaryToWriter
    );
  }
  f = message.getInternalTicker();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.io.lightcone.data.dex.MarketTicker.serializeBinaryToWriter
    );
  }
};


/**
 * optional OrderBook.Update orderbook = 1;
 * @return {?proto.io.lightcone.data.dex.OrderBook.Update}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.Notification.prototype.getOrderbook = function() {
  return /** @type{?proto.io.lightcone.data.dex.OrderBook.Update} */ (
    jspb.Message.getWrapperField(this, proto.io.lightcone.data.dex.OrderBook.Update, 1));
};


/** @param {?proto.io.lightcone.data.dex.OrderBook.Update|undefined} value */
proto.io.lightcone.data.dex.SocketIOSubscription.Notification.prototype.setOrderbook = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.io.lightcone.data.dex.SocketIOSubscription.Notification.prototype.clearOrderbook = function() {
  this.setOrderbook(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.Notification.prototype.hasOrderbook = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Candles candles = 2;
 * @return {?proto.io.lightcone.data.dex.Candles}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.Notification.prototype.getCandles = function() {
  return /** @type{?proto.io.lightcone.data.dex.Candles} */ (
    jspb.Message.getWrapperField(this, proto.io.lightcone.data.dex.Candles, 2));
};


/** @param {?proto.io.lightcone.data.dex.Candles|undefined} value */
proto.io.lightcone.data.dex.SocketIOSubscription.Notification.prototype.setCandles = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.io.lightcone.data.dex.SocketIOSubscription.Notification.prototype.clearCandles = function() {
  this.setCandles(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.Notification.prototype.hasCandles = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Fill fill = 3;
 * @return {?proto.io.lightcone.data.dex.Fill}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.Notification.prototype.getFill = function() {
  return /** @type{?proto.io.lightcone.data.dex.Fill} */ (
    jspb.Message.getWrapperField(this, proto.io.lightcone.data.dex.Fill, 3));
};


/** @param {?proto.io.lightcone.data.dex.Fill|undefined} value */
proto.io.lightcone.data.dex.SocketIOSubscription.Notification.prototype.setFill = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.io.lightcone.data.dex.SocketIOSubscription.Notification.prototype.clearFill = function() {
  this.setFill(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.Notification.prototype.hasFill = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional MarketTicker internal_ticker = 4;
 * @return {?proto.io.lightcone.data.dex.MarketTicker}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.Notification.prototype.getInternalTicker = function() {
  return /** @type{?proto.io.lightcone.data.dex.MarketTicker} */ (
    jspb.Message.getWrapperField(this, proto.io.lightcone.data.dex.MarketTicker, 4));
};


/** @param {?proto.io.lightcone.data.dex.MarketTicker|undefined} value */
proto.io.lightcone.data.dex.SocketIOSubscription.Notification.prototype.setInternalTicker = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.io.lightcone.data.dex.SocketIOSubscription.Notification.prototype.clearInternalTicker = function() {
  this.setInternalTicker(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.Notification.prototype.hasInternalTicker = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ParamsForOrderbook params_for_orderbook = 1;
 * @return {?proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.prototype.getParamsForOrderbook = function() {
  return /** @type{?proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook} */ (
    jspb.Message.getWrapperField(this, proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook, 1));
};


/** @param {?proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForOrderbook|undefined} value */
proto.io.lightcone.data.dex.SocketIOSubscription.prototype.setParamsForOrderbook = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.io.lightcone.data.dex.SocketIOSubscription.prototype.clearParamsForOrderbook = function() {
  this.setParamsForOrderbook(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.prototype.hasParamsForOrderbook = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ParamsForCandles params_for_candles = 2;
 * @return {?proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.prototype.getParamsForCandles = function() {
  return /** @type{?proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles} */ (
    jspb.Message.getWrapperField(this, proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles, 2));
};


/** @param {?proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForCandles|undefined} value */
proto.io.lightcone.data.dex.SocketIOSubscription.prototype.setParamsForCandles = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.io.lightcone.data.dex.SocketIOSubscription.prototype.clearParamsForCandles = function() {
  this.setParamsForCandles(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.prototype.hasParamsForCandles = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ParamsForFills params_for_fills = 3;
 * @return {?proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.prototype.getParamsForFills = function() {
  return /** @type{?proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills} */ (
    jspb.Message.getWrapperField(this, proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills, 3));
};


/** @param {?proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForFills|undefined} value */
proto.io.lightcone.data.dex.SocketIOSubscription.prototype.setParamsForFills = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.io.lightcone.data.dex.SocketIOSubscription.prototype.clearParamsForFills = function() {
  this.setParamsForFills(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.prototype.hasParamsForFills = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ParamsForInternalTickers params_for_internal_tickers = 4;
 * @return {?proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForInternalTickers}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.prototype.getParamsForInternalTickers = function() {
  return /** @type{?proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForInternalTickers} */ (
    jspb.Message.getWrapperField(this, proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForInternalTickers, 4));
};


/** @param {?proto.io.lightcone.data.dex.SocketIOSubscription.ParamsForInternalTickers|undefined} value */
proto.io.lightcone.data.dex.SocketIOSubscription.prototype.setParamsForInternalTickers = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.io.lightcone.data.dex.SocketIOSubscription.prototype.clearParamsForInternalTickers = function() {
  this.setParamsForInternalTickers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.dex.SocketIOSubscription.prototype.hasParamsForInternalTickers = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.io.lightcone.data.dex);
