/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var data_types_pb = require('./data_types_pb.js');
goog.object.extend(proto, data_types_pb);
goog.exportSymbol('proto.io.lightcone.data.order.Fill', null, global);
goog.exportSymbol('proto.io.lightcone.data.order.FillData', null, global);
goog.exportSymbol('proto.io.lightcone.data.order.Order', null, global);
goog.exportSymbol('proto.io.lightcone.data.order.TokenAmounts', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.order.TokenAmounts = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.lightcone.data.order.TokenAmounts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.order.TokenAmounts.displayName = 'proto.io.lightcone.data.order.TokenAmounts';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.order.TokenAmounts.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.order.TokenAmounts.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.order.TokenAmounts} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.order.TokenAmounts.toObject = function(includeInstance, msg) {
  var f, obj = {
    amountS: (f = msg.getAmountS()) && data_types_pb.Amount.toObject(includeInstance, f),
    amountB: (f = msg.getAmountB()) && data_types_pb.Amount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.order.TokenAmounts}
 */
proto.io.lightcone.data.order.TokenAmounts.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.order.TokenAmounts;
  return proto.io.lightcone.data.order.TokenAmounts.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.order.TokenAmounts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.order.TokenAmounts}
 */
proto.io.lightcone.data.order.TokenAmounts.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new data_types_pb.Amount;
      reader.readMessage(value,data_types_pb.Amount.deserializeBinaryFromReader);
      msg.setAmountS(value);
      break;
    case 2:
      var value = new data_types_pb.Amount;
      reader.readMessage(value,data_types_pb.Amount.deserializeBinaryFromReader);
      msg.setAmountB(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.order.TokenAmounts.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.order.TokenAmounts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.order.TokenAmounts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.order.TokenAmounts.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmountS();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      data_types_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getAmountB();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      data_types_pb.Amount.serializeBinaryToWriter
    );
  }
};


/**
 * optional io.lightcone.data.types.Amount amount_s = 1;
 * @return {?proto.io.lightcone.data.types.Amount}
 */
proto.io.lightcone.data.order.TokenAmounts.prototype.getAmountS = function() {
  return /** @type{?proto.io.lightcone.data.types.Amount} */ (
    jspb.Message.getWrapperField(this, data_types_pb.Amount, 1));
};


/** @param {?proto.io.lightcone.data.types.Amount|undefined} value */
proto.io.lightcone.data.order.TokenAmounts.prototype.setAmountS = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.io.lightcone.data.order.TokenAmounts.prototype.clearAmountS = function() {
  this.setAmountS(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.order.TokenAmounts.prototype.hasAmountS = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional io.lightcone.data.types.Amount amount_b = 2;
 * @return {?proto.io.lightcone.data.types.Amount}
 */
proto.io.lightcone.data.order.TokenAmounts.prototype.getAmountB = function() {
  return /** @type{?proto.io.lightcone.data.types.Amount} */ (
    jspb.Message.getWrapperField(this, data_types_pb.Amount, 2));
};


/** @param {?proto.io.lightcone.data.types.Amount|undefined} value */
proto.io.lightcone.data.order.TokenAmounts.prototype.setAmountB = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.io.lightcone.data.order.TokenAmounts.prototype.clearAmountB = function() {
  this.setAmountB(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.order.TokenAmounts.prototype.hasAmountB = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.order.Order = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.lightcone.data.order.Order, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.order.Order.displayName = 'proto.io.lightcone.data.order.Order';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.order.Order.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.order.Order.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.order.Order} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.order.Order.toObject = function(includeInstance, msg) {
  var f, obj = {
    exchangeId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    orderId: (f = msg.getOrderId()) && data_types_pb.OrderID.toObject(includeInstance, f),
    accountId: (f = msg.getAccountId()) && data_types_pb.AccountID.toObject(includeInstance, f),
    tokenS: (f = msg.getTokenS()) && data_types_pb.TokenID.toObject(includeInstance, f),
    tokenB: (f = msg.getTokenB()) && data_types_pb.TokenID.toObject(includeInstance, f),
    amounts: (f = msg.getAmounts()) && proto.io.lightcone.data.order.TokenAmounts.toObject(includeInstance, f),
    maxFee: (f = msg.getMaxFee()) && data_types_pb.Bips.toObject(includeInstance, f),
    fee: (f = msg.getFee()) && data_types_pb.Bips.toObject(includeInstance, f),
    rebate: (f = msg.getRebate()) && data_types_pb.Bips.toObject(includeInstance, f),
    allOrNone: jspb.Message.getFieldWithDefault(msg, 12, false),
    validSince: jspb.Message.getFieldWithDefault(msg, 13, 0),
    validUntil: jspb.Message.getFieldWithDefault(msg, 14, 0),
    buy: jspb.Message.getFieldWithDefault(msg, 15, false),
    tradingPubKey: (f = msg.getTradingPubKey()) && data_types_pb.EdDSAPubKey.toObject(includeInstance, f),
    dualAuthPubKey: (f = msg.getDualAuthPubKey()) && data_types_pb.EdDSAPubKey.toObject(includeInstance, f),
    dualAuthPrivKey: (f = msg.getDualAuthPrivKey()) && data_types_pb.EdDSAPrivKey.toObject(includeInstance, f),
    tradingSig: (f = msg.getTradingSig()) && data_types_pb.EdDSASignature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.order.Order}
 */
proto.io.lightcone.data.order.Order.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.order.Order;
  return proto.io.lightcone.data.order.Order.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.order.Order} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.order.Order}
 */
proto.io.lightcone.data.order.Order.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExchangeId(value);
      break;
    case 2:
      var value = new data_types_pb.OrderID;
      reader.readMessage(value,data_types_pb.OrderID.deserializeBinaryFromReader);
      msg.setOrderId(value);
      break;
    case 3:
      var value = new data_types_pb.AccountID;
      reader.readMessage(value,data_types_pb.AccountID.deserializeBinaryFromReader);
      msg.setAccountId(value);
      break;
    case 5:
      var value = new data_types_pb.TokenID;
      reader.readMessage(value,data_types_pb.TokenID.deserializeBinaryFromReader);
      msg.setTokenS(value);
      break;
    case 6:
      var value = new data_types_pb.TokenID;
      reader.readMessage(value,data_types_pb.TokenID.deserializeBinaryFromReader);
      msg.setTokenB(value);
      break;
    case 8:
      var value = new proto.io.lightcone.data.order.TokenAmounts;
      reader.readMessage(value,proto.io.lightcone.data.order.TokenAmounts.deserializeBinaryFromReader);
      msg.setAmounts(value);
      break;
    case 9:
      var value = new data_types_pb.Bips;
      reader.readMessage(value,data_types_pb.Bips.deserializeBinaryFromReader);
      msg.setMaxFee(value);
      break;
    case 10:
      var value = new data_types_pb.Bips;
      reader.readMessage(value,data_types_pb.Bips.deserializeBinaryFromReader);
      msg.setFee(value);
      break;
    case 11:
      var value = new data_types_pb.Bips;
      reader.readMessage(value,data_types_pb.Bips.deserializeBinaryFromReader);
      msg.setRebate(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllOrNone(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValidSince(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValidUntil(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBuy(value);
      break;
    case 16:
      var value = new data_types_pb.EdDSAPubKey;
      reader.readMessage(value,data_types_pb.EdDSAPubKey.deserializeBinaryFromReader);
      msg.setTradingPubKey(value);
      break;
    case 17:
      var value = new data_types_pb.EdDSAPubKey;
      reader.readMessage(value,data_types_pb.EdDSAPubKey.deserializeBinaryFromReader);
      msg.setDualAuthPubKey(value);
      break;
    case 18:
      var value = new data_types_pb.EdDSAPrivKey;
      reader.readMessage(value,data_types_pb.EdDSAPrivKey.deserializeBinaryFromReader);
      msg.setDualAuthPrivKey(value);
      break;
    case 19:
      var value = new data_types_pb.EdDSASignature;
      reader.readMessage(value,data_types_pb.EdDSASignature.deserializeBinaryFromReader);
      msg.setTradingSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.order.Order.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.order.Order.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.order.Order} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.order.Order.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExchangeId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getOrderId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      data_types_pb.OrderID.serializeBinaryToWriter
    );
  }
  f = message.getAccountId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      data_types_pb.AccountID.serializeBinaryToWriter
    );
  }
  f = message.getTokenS();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      data_types_pb.TokenID.serializeBinaryToWriter
    );
  }
  f = message.getTokenB();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      data_types_pb.TokenID.serializeBinaryToWriter
    );
  }
  f = message.getAmounts();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.io.lightcone.data.order.TokenAmounts.serializeBinaryToWriter
    );
  }
  f = message.getMaxFee();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      data_types_pb.Bips.serializeBinaryToWriter
    );
  }
  f = message.getFee();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      data_types_pb.Bips.serializeBinaryToWriter
    );
  }
  f = message.getRebate();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      data_types_pb.Bips.serializeBinaryToWriter
    );
  }
  f = message.getAllOrNone();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getValidSince();
  if (f !== 0) {
    writer.writeUint64(
      13,
      f
    );
  }
  f = message.getValidUntil();
  if (f !== 0) {
    writer.writeUint64(
      14,
      f
    );
  }
  f = message.getBuy();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getTradingPubKey();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      data_types_pb.EdDSAPubKey.serializeBinaryToWriter
    );
  }
  f = message.getDualAuthPubKey();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      data_types_pb.EdDSAPubKey.serializeBinaryToWriter
    );
  }
  f = message.getDualAuthPrivKey();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      data_types_pb.EdDSAPrivKey.serializeBinaryToWriter
    );
  }
  f = message.getTradingSig();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      data_types_pb.EdDSASignature.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 exchange_id = 1;
 * @return {number}
 */
proto.io.lightcone.data.order.Order.prototype.getExchangeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.lightcone.data.order.Order.prototype.setExchangeId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional io.lightcone.data.types.OrderID order_id = 2;
 * @return {?proto.io.lightcone.data.types.OrderID}
 */
proto.io.lightcone.data.order.Order.prototype.getOrderId = function() {
  return /** @type{?proto.io.lightcone.data.types.OrderID} */ (
    jspb.Message.getWrapperField(this, data_types_pb.OrderID, 2));
};


/** @param {?proto.io.lightcone.data.types.OrderID|undefined} value */
proto.io.lightcone.data.order.Order.prototype.setOrderId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.io.lightcone.data.order.Order.prototype.clearOrderId = function() {
  this.setOrderId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.order.Order.prototype.hasOrderId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional io.lightcone.data.types.AccountID account_id = 3;
 * @return {?proto.io.lightcone.data.types.AccountID}
 */
proto.io.lightcone.data.order.Order.prototype.getAccountId = function() {
  return /** @type{?proto.io.lightcone.data.types.AccountID} */ (
    jspb.Message.getWrapperField(this, data_types_pb.AccountID, 3));
};


/** @param {?proto.io.lightcone.data.types.AccountID|undefined} value */
proto.io.lightcone.data.order.Order.prototype.setAccountId = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.io.lightcone.data.order.Order.prototype.clearAccountId = function() {
  this.setAccountId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.order.Order.prototype.hasAccountId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional io.lightcone.data.types.TokenID token_s = 5;
 * @return {?proto.io.lightcone.data.types.TokenID}
 */
proto.io.lightcone.data.order.Order.prototype.getTokenS = function() {
  return /** @type{?proto.io.lightcone.data.types.TokenID} */ (
    jspb.Message.getWrapperField(this, data_types_pb.TokenID, 5));
};


/** @param {?proto.io.lightcone.data.types.TokenID|undefined} value */
proto.io.lightcone.data.order.Order.prototype.setTokenS = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.io.lightcone.data.order.Order.prototype.clearTokenS = function() {
  this.setTokenS(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.order.Order.prototype.hasTokenS = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional io.lightcone.data.types.TokenID token_b = 6;
 * @return {?proto.io.lightcone.data.types.TokenID}
 */
proto.io.lightcone.data.order.Order.prototype.getTokenB = function() {
  return /** @type{?proto.io.lightcone.data.types.TokenID} */ (
    jspb.Message.getWrapperField(this, data_types_pb.TokenID, 6));
};


/** @param {?proto.io.lightcone.data.types.TokenID|undefined} value */
proto.io.lightcone.data.order.Order.prototype.setTokenB = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.io.lightcone.data.order.Order.prototype.clearTokenB = function() {
  this.setTokenB(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.order.Order.prototype.hasTokenB = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional TokenAmounts amounts = 8;
 * @return {?proto.io.lightcone.data.order.TokenAmounts}
 */
proto.io.lightcone.data.order.Order.prototype.getAmounts = function() {
  return /** @type{?proto.io.lightcone.data.order.TokenAmounts} */ (
    jspb.Message.getWrapperField(this, proto.io.lightcone.data.order.TokenAmounts, 8));
};


/** @param {?proto.io.lightcone.data.order.TokenAmounts|undefined} value */
proto.io.lightcone.data.order.Order.prototype.setAmounts = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.io.lightcone.data.order.Order.prototype.clearAmounts = function() {
  this.setAmounts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.order.Order.prototype.hasAmounts = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional io.lightcone.data.types.Bips max_fee = 9;
 * @return {?proto.io.lightcone.data.types.Bips}
 */
proto.io.lightcone.data.order.Order.prototype.getMaxFee = function() {
  return /** @type{?proto.io.lightcone.data.types.Bips} */ (
    jspb.Message.getWrapperField(this, data_types_pb.Bips, 9));
};


/** @param {?proto.io.lightcone.data.types.Bips|undefined} value */
proto.io.lightcone.data.order.Order.prototype.setMaxFee = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.io.lightcone.data.order.Order.prototype.clearMaxFee = function() {
  this.setMaxFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.order.Order.prototype.hasMaxFee = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional io.lightcone.data.types.Bips fee = 10;
 * @return {?proto.io.lightcone.data.types.Bips}
 */
proto.io.lightcone.data.order.Order.prototype.getFee = function() {
  return /** @type{?proto.io.lightcone.data.types.Bips} */ (
    jspb.Message.getWrapperField(this, data_types_pb.Bips, 10));
};


/** @param {?proto.io.lightcone.data.types.Bips|undefined} value */
proto.io.lightcone.data.order.Order.prototype.setFee = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.io.lightcone.data.order.Order.prototype.clearFee = function() {
  this.setFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.order.Order.prototype.hasFee = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional io.lightcone.data.types.Bips rebate = 11;
 * @return {?proto.io.lightcone.data.types.Bips}
 */
proto.io.lightcone.data.order.Order.prototype.getRebate = function() {
  return /** @type{?proto.io.lightcone.data.types.Bips} */ (
    jspb.Message.getWrapperField(this, data_types_pb.Bips, 11));
};


/** @param {?proto.io.lightcone.data.types.Bips|undefined} value */
proto.io.lightcone.data.order.Order.prototype.setRebate = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.io.lightcone.data.order.Order.prototype.clearRebate = function() {
  this.setRebate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.order.Order.prototype.hasRebate = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bool all_or_none = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.io.lightcone.data.order.Order.prototype.getAllOrNone = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.io.lightcone.data.order.Order.prototype.setAllOrNone = function(value) {
  jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional uint64 valid_since = 13;
 * @return {number}
 */
proto.io.lightcone.data.order.Order.prototype.getValidSince = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.io.lightcone.data.order.Order.prototype.setValidSince = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional uint64 valid_until = 14;
 * @return {number}
 */
proto.io.lightcone.data.order.Order.prototype.getValidUntil = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.io.lightcone.data.order.Order.prototype.setValidUntil = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional bool buy = 15;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.io.lightcone.data.order.Order.prototype.getBuy = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 15, false));
};


/** @param {boolean} value */
proto.io.lightcone.data.order.Order.prototype.setBuy = function(value) {
  jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional io.lightcone.data.types.EdDSAPubKey trading_pub_key = 16;
 * @return {?proto.io.lightcone.data.types.EdDSAPubKey}
 */
proto.io.lightcone.data.order.Order.prototype.getTradingPubKey = function() {
  return /** @type{?proto.io.lightcone.data.types.EdDSAPubKey} */ (
    jspb.Message.getWrapperField(this, data_types_pb.EdDSAPubKey, 16));
};


/** @param {?proto.io.lightcone.data.types.EdDSAPubKey|undefined} value */
proto.io.lightcone.data.order.Order.prototype.setTradingPubKey = function(value) {
  jspb.Message.setWrapperField(this, 16, value);
};


proto.io.lightcone.data.order.Order.prototype.clearTradingPubKey = function() {
  this.setTradingPubKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.order.Order.prototype.hasTradingPubKey = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional io.lightcone.data.types.EdDSAPubKey dual_auth_pub_key = 17;
 * @return {?proto.io.lightcone.data.types.EdDSAPubKey}
 */
proto.io.lightcone.data.order.Order.prototype.getDualAuthPubKey = function() {
  return /** @type{?proto.io.lightcone.data.types.EdDSAPubKey} */ (
    jspb.Message.getWrapperField(this, data_types_pb.EdDSAPubKey, 17));
};


/** @param {?proto.io.lightcone.data.types.EdDSAPubKey|undefined} value */
proto.io.lightcone.data.order.Order.prototype.setDualAuthPubKey = function(value) {
  jspb.Message.setWrapperField(this, 17, value);
};


proto.io.lightcone.data.order.Order.prototype.clearDualAuthPubKey = function() {
  this.setDualAuthPubKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.order.Order.prototype.hasDualAuthPubKey = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional io.lightcone.data.types.EdDSAPrivKey dual_auth_priv_key = 18;
 * @return {?proto.io.lightcone.data.types.EdDSAPrivKey}
 */
proto.io.lightcone.data.order.Order.prototype.getDualAuthPrivKey = function() {
  return /** @type{?proto.io.lightcone.data.types.EdDSAPrivKey} */ (
    jspb.Message.getWrapperField(this, data_types_pb.EdDSAPrivKey, 18));
};


/** @param {?proto.io.lightcone.data.types.EdDSAPrivKey|undefined} value */
proto.io.lightcone.data.order.Order.prototype.setDualAuthPrivKey = function(value) {
  jspb.Message.setWrapperField(this, 18, value);
};


proto.io.lightcone.data.order.Order.prototype.clearDualAuthPrivKey = function() {
  this.setDualAuthPrivKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.order.Order.prototype.hasDualAuthPrivKey = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional io.lightcone.data.types.EdDSASignature trading_sig = 19;
 * @return {?proto.io.lightcone.data.types.EdDSASignature}
 */
proto.io.lightcone.data.order.Order.prototype.getTradingSig = function() {
  return /** @type{?proto.io.lightcone.data.types.EdDSASignature} */ (
    jspb.Message.getWrapperField(this, data_types_pb.EdDSASignature, 19));
};


/** @param {?proto.io.lightcone.data.types.EdDSASignature|undefined} value */
proto.io.lightcone.data.order.Order.prototype.setTradingSig = function(value) {
  jspb.Message.setWrapperField(this, 19, value);
};


proto.io.lightcone.data.order.Order.prototype.clearTradingSig = function() {
  this.setTradingSig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.order.Order.prototype.hasTradingSig = function() {
  return jspb.Message.getField(this, 19) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.order.Fill = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.lightcone.data.order.Fill, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.order.Fill.displayName = 'proto.io.lightcone.data.order.Fill';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.order.Fill.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.order.Fill.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.order.Fill} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.order.Fill.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: (f = msg.getAccountId()) && data_types_pb.AccountID.toObject(includeInstance, f),
    orderId: (f = msg.getOrderId()) && data_types_pb.OrderID.toObject(includeInstance, f),
    isSell: jspb.Message.getFieldWithDefault(msg, 3, false),
    price: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    amountBaseToken: (f = msg.getAmountBaseToken()) && data_types_pb.Amount.toObject(includeInstance, f),
    amountQuoteToken: (f = msg.getAmountQuoteToken()) && data_types_pb.Amount.toObject(includeInstance, f),
    timestamp: jspb.Message.getFieldWithDefault(msg, 7, 0),
    deprecated: jspb.Message.getFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.order.Fill}
 */
proto.io.lightcone.data.order.Fill.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.order.Fill;
  return proto.io.lightcone.data.order.Fill.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.order.Fill} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.order.Fill}
 */
proto.io.lightcone.data.order.Fill.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new data_types_pb.AccountID;
      reader.readMessage(value,data_types_pb.AccountID.deserializeBinaryFromReader);
      msg.setAccountId(value);
      break;
    case 2:
      var value = new data_types_pb.OrderID;
      reader.readMessage(value,data_types_pb.OrderID.deserializeBinaryFromReader);
      msg.setOrderId(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSell(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 5:
      var value = new data_types_pb.Amount;
      reader.readMessage(value,data_types_pb.Amount.deserializeBinaryFromReader);
      msg.setAmountBaseToken(value);
      break;
    case 6:
      var value = new data_types_pb.Amount;
      reader.readMessage(value,data_types_pb.Amount.deserializeBinaryFromReader);
      msg.setAmountQuoteToken(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeprecated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.order.Fill.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.order.Fill.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.order.Fill} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.order.Fill.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      data_types_pb.AccountID.serializeBinaryToWriter
    );
  }
  f = message.getOrderId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      data_types_pb.OrderID.serializeBinaryToWriter
    );
  }
  f = message.getIsSell();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getAmountBaseToken();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      data_types_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getAmountQuoteToken();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      data_types_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getDeprecated();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional io.lightcone.data.types.AccountID account_id = 1;
 * @return {?proto.io.lightcone.data.types.AccountID}
 */
proto.io.lightcone.data.order.Fill.prototype.getAccountId = function() {
  return /** @type{?proto.io.lightcone.data.types.AccountID} */ (
    jspb.Message.getWrapperField(this, data_types_pb.AccountID, 1));
};


/** @param {?proto.io.lightcone.data.types.AccountID|undefined} value */
proto.io.lightcone.data.order.Fill.prototype.setAccountId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.io.lightcone.data.order.Fill.prototype.clearAccountId = function() {
  this.setAccountId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.order.Fill.prototype.hasAccountId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional io.lightcone.data.types.OrderID order_id = 2;
 * @return {?proto.io.lightcone.data.types.OrderID}
 */
proto.io.lightcone.data.order.Fill.prototype.getOrderId = function() {
  return /** @type{?proto.io.lightcone.data.types.OrderID} */ (
    jspb.Message.getWrapperField(this, data_types_pb.OrderID, 2));
};


/** @param {?proto.io.lightcone.data.types.OrderID|undefined} value */
proto.io.lightcone.data.order.Fill.prototype.setOrderId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.io.lightcone.data.order.Fill.prototype.clearOrderId = function() {
  this.setOrderId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.order.Fill.prototype.hasOrderId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool is_sell = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.io.lightcone.data.order.Fill.prototype.getIsSell = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.io.lightcone.data.order.Fill.prototype.setIsSell = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional double price = 4;
 * @return {number}
 */
proto.io.lightcone.data.order.Fill.prototype.getPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.io.lightcone.data.order.Fill.prototype.setPrice = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional io.lightcone.data.types.Amount amount_base_token = 5;
 * @return {?proto.io.lightcone.data.types.Amount}
 */
proto.io.lightcone.data.order.Fill.prototype.getAmountBaseToken = function() {
  return /** @type{?proto.io.lightcone.data.types.Amount} */ (
    jspb.Message.getWrapperField(this, data_types_pb.Amount, 5));
};


/** @param {?proto.io.lightcone.data.types.Amount|undefined} value */
proto.io.lightcone.data.order.Fill.prototype.setAmountBaseToken = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.io.lightcone.data.order.Fill.prototype.clearAmountBaseToken = function() {
  this.setAmountBaseToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.order.Fill.prototype.hasAmountBaseToken = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional io.lightcone.data.types.Amount amount_quote_token = 6;
 * @return {?proto.io.lightcone.data.types.Amount}
 */
proto.io.lightcone.data.order.Fill.prototype.getAmountQuoteToken = function() {
  return /** @type{?proto.io.lightcone.data.types.Amount} */ (
    jspb.Message.getWrapperField(this, data_types_pb.Amount, 6));
};


/** @param {?proto.io.lightcone.data.types.Amount|undefined} value */
proto.io.lightcone.data.order.Fill.prototype.setAmountQuoteToken = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.io.lightcone.data.order.Fill.prototype.clearAmountQuoteToken = function() {
  this.setAmountQuoteToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.order.Fill.prototype.hasAmountQuoteToken = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint64 timestamp = 7;
 * @return {number}
 */
proto.io.lightcone.data.order.Fill.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.io.lightcone.data.order.Fill.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool deprecated = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.io.lightcone.data.order.Fill.prototype.getDeprecated = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.io.lightcone.data.order.Fill.prototype.setDeprecated = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.lightcone.data.order.FillData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.lightcone.data.order.FillData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.lightcone.data.order.FillData.displayName = 'proto.io.lightcone.data.order.FillData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.lightcone.data.order.FillData.prototype.toObject = function(opt_includeInstance) {
  return proto.io.lightcone.data.order.FillData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.lightcone.data.order.FillData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.order.FillData.toObject = function(includeInstance, msg) {
  var f, obj = {
    sequenceId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    accountId: (f = msg.getAccountId()) && data_types_pb.AccountID.toObject(includeInstance, f),
    orderId: (f = msg.getOrderId()) && data_types_pb.OrderID.toObject(includeInstance, f),
    settlementRequestId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    tokenS: (f = msg.getTokenS()) && data_types_pb.TokenID.toObject(includeInstance, f),
    tokenB: (f = msg.getTokenB()) && data_types_pb.TokenID.toObject(includeInstance, f),
    isSell: jspb.Message.getFieldWithDefault(msg, 7, false),
    price: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    estimateAmountBaseToken: (f = msg.getEstimateAmountBaseToken()) && data_types_pb.Amount.toObject(includeInstance, f),
    estimateAmountQuoteToken: (f = msg.getEstimateAmountQuoteToken()) && data_types_pb.Amount.toObject(includeInstance, f),
    actualAmountBaseToken: (f = msg.getActualAmountBaseToken()) && data_types_pb.Amount.toObject(includeInstance, f),
    actualAmountQuoteToken: (f = msg.getActualAmountQuoteToken()) && data_types_pb.Amount.toObject(includeInstance, f),
    createdAt: jspb.Message.getFieldWithDefault(msg, 13, 0),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 14, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.lightcone.data.order.FillData}
 */
proto.io.lightcone.data.order.FillData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.lightcone.data.order.FillData;
  return proto.io.lightcone.data.order.FillData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.lightcone.data.order.FillData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.lightcone.data.order.FillData}
 */
proto.io.lightcone.data.order.FillData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSequenceId(value);
      break;
    case 2:
      var value = new data_types_pb.AccountID;
      reader.readMessage(value,data_types_pb.AccountID.deserializeBinaryFromReader);
      msg.setAccountId(value);
      break;
    case 3:
      var value = new data_types_pb.OrderID;
      reader.readMessage(value,data_types_pb.OrderID.deserializeBinaryFromReader);
      msg.setOrderId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSettlementRequestId(value);
      break;
    case 5:
      var value = new data_types_pb.TokenID;
      reader.readMessage(value,data_types_pb.TokenID.deserializeBinaryFromReader);
      msg.setTokenS(value);
      break;
    case 6:
      var value = new data_types_pb.TokenID;
      reader.readMessage(value,data_types_pb.TokenID.deserializeBinaryFromReader);
      msg.setTokenB(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSell(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 9:
      var value = new data_types_pb.Amount;
      reader.readMessage(value,data_types_pb.Amount.deserializeBinaryFromReader);
      msg.setEstimateAmountBaseToken(value);
      break;
    case 10:
      var value = new data_types_pb.Amount;
      reader.readMessage(value,data_types_pb.Amount.deserializeBinaryFromReader);
      msg.setEstimateAmountQuoteToken(value);
      break;
    case 11:
      var value = new data_types_pb.Amount;
      reader.readMessage(value,data_types_pb.Amount.deserializeBinaryFromReader);
      msg.setActualAmountBaseToken(value);
      break;
    case 12:
      var value = new data_types_pb.Amount;
      reader.readMessage(value,data_types_pb.Amount.deserializeBinaryFromReader);
      msg.setActualAmountQuoteToken(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCreatedAt(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUpdatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.lightcone.data.order.FillData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.lightcone.data.order.FillData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.lightcone.data.order.FillData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.lightcone.data.order.FillData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSequenceId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAccountId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      data_types_pb.AccountID.serializeBinaryToWriter
    );
  }
  f = message.getOrderId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      data_types_pb.OrderID.serializeBinaryToWriter
    );
  }
  f = message.getSettlementRequestId();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getTokenS();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      data_types_pb.TokenID.serializeBinaryToWriter
    );
  }
  f = message.getTokenB();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      data_types_pb.TokenID.serializeBinaryToWriter
    );
  }
  f = message.getIsSell();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getEstimateAmountBaseToken();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      data_types_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getEstimateAmountQuoteToken();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      data_types_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getActualAmountBaseToken();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      data_types_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getActualAmountQuoteToken();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      data_types_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeUint64(
      13,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f !== 0) {
    writer.writeUint64(
      14,
      f
    );
  }
};


/**
 * optional uint64 sequence_id = 1;
 * @return {number}
 */
proto.io.lightcone.data.order.FillData.prototype.getSequenceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.lightcone.data.order.FillData.prototype.setSequenceId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional io.lightcone.data.types.AccountID account_id = 2;
 * @return {?proto.io.lightcone.data.types.AccountID}
 */
proto.io.lightcone.data.order.FillData.prototype.getAccountId = function() {
  return /** @type{?proto.io.lightcone.data.types.AccountID} */ (
    jspb.Message.getWrapperField(this, data_types_pb.AccountID, 2));
};


/** @param {?proto.io.lightcone.data.types.AccountID|undefined} value */
proto.io.lightcone.data.order.FillData.prototype.setAccountId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.io.lightcone.data.order.FillData.prototype.clearAccountId = function() {
  this.setAccountId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.order.FillData.prototype.hasAccountId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional io.lightcone.data.types.OrderID order_id = 3;
 * @return {?proto.io.lightcone.data.types.OrderID}
 */
proto.io.lightcone.data.order.FillData.prototype.getOrderId = function() {
  return /** @type{?proto.io.lightcone.data.types.OrderID} */ (
    jspb.Message.getWrapperField(this, data_types_pb.OrderID, 3));
};


/** @param {?proto.io.lightcone.data.types.OrderID|undefined} value */
proto.io.lightcone.data.order.FillData.prototype.setOrderId = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.io.lightcone.data.order.FillData.prototype.clearOrderId = function() {
  this.setOrderId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.order.FillData.prototype.hasOrderId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 settlement_request_id = 4;
 * @return {number}
 */
proto.io.lightcone.data.order.FillData.prototype.getSettlementRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.io.lightcone.data.order.FillData.prototype.setSettlementRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional io.lightcone.data.types.TokenID token_s = 5;
 * @return {?proto.io.lightcone.data.types.TokenID}
 */
proto.io.lightcone.data.order.FillData.prototype.getTokenS = function() {
  return /** @type{?proto.io.lightcone.data.types.TokenID} */ (
    jspb.Message.getWrapperField(this, data_types_pb.TokenID, 5));
};


/** @param {?proto.io.lightcone.data.types.TokenID|undefined} value */
proto.io.lightcone.data.order.FillData.prototype.setTokenS = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.io.lightcone.data.order.FillData.prototype.clearTokenS = function() {
  this.setTokenS(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.order.FillData.prototype.hasTokenS = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional io.lightcone.data.types.TokenID token_b = 6;
 * @return {?proto.io.lightcone.data.types.TokenID}
 */
proto.io.lightcone.data.order.FillData.prototype.getTokenB = function() {
  return /** @type{?proto.io.lightcone.data.types.TokenID} */ (
    jspb.Message.getWrapperField(this, data_types_pb.TokenID, 6));
};


/** @param {?proto.io.lightcone.data.types.TokenID|undefined} value */
proto.io.lightcone.data.order.FillData.prototype.setTokenB = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.io.lightcone.data.order.FillData.prototype.clearTokenB = function() {
  this.setTokenB(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.order.FillData.prototype.hasTokenB = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool is_sell = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.io.lightcone.data.order.FillData.prototype.getIsSell = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.io.lightcone.data.order.FillData.prototype.setIsSell = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional double price = 8;
 * @return {number}
 */
proto.io.lightcone.data.order.FillData.prototype.getPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.io.lightcone.data.order.FillData.prototype.setPrice = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional io.lightcone.data.types.Amount estimate_amount_base_token = 9;
 * @return {?proto.io.lightcone.data.types.Amount}
 */
proto.io.lightcone.data.order.FillData.prototype.getEstimateAmountBaseToken = function() {
  return /** @type{?proto.io.lightcone.data.types.Amount} */ (
    jspb.Message.getWrapperField(this, data_types_pb.Amount, 9));
};


/** @param {?proto.io.lightcone.data.types.Amount|undefined} value */
proto.io.lightcone.data.order.FillData.prototype.setEstimateAmountBaseToken = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.io.lightcone.data.order.FillData.prototype.clearEstimateAmountBaseToken = function() {
  this.setEstimateAmountBaseToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.order.FillData.prototype.hasEstimateAmountBaseToken = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional io.lightcone.data.types.Amount estimate_amount_quote_token = 10;
 * @return {?proto.io.lightcone.data.types.Amount}
 */
proto.io.lightcone.data.order.FillData.prototype.getEstimateAmountQuoteToken = function() {
  return /** @type{?proto.io.lightcone.data.types.Amount} */ (
    jspb.Message.getWrapperField(this, data_types_pb.Amount, 10));
};


/** @param {?proto.io.lightcone.data.types.Amount|undefined} value */
proto.io.lightcone.data.order.FillData.prototype.setEstimateAmountQuoteToken = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.io.lightcone.data.order.FillData.prototype.clearEstimateAmountQuoteToken = function() {
  this.setEstimateAmountQuoteToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.order.FillData.prototype.hasEstimateAmountQuoteToken = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional io.lightcone.data.types.Amount actual_amount_base_token = 11;
 * @return {?proto.io.lightcone.data.types.Amount}
 */
proto.io.lightcone.data.order.FillData.prototype.getActualAmountBaseToken = function() {
  return /** @type{?proto.io.lightcone.data.types.Amount} */ (
    jspb.Message.getWrapperField(this, data_types_pb.Amount, 11));
};


/** @param {?proto.io.lightcone.data.types.Amount|undefined} value */
proto.io.lightcone.data.order.FillData.prototype.setActualAmountBaseToken = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.io.lightcone.data.order.FillData.prototype.clearActualAmountBaseToken = function() {
  this.setActualAmountBaseToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.order.FillData.prototype.hasActualAmountBaseToken = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional io.lightcone.data.types.Amount actual_amount_quote_token = 12;
 * @return {?proto.io.lightcone.data.types.Amount}
 */
proto.io.lightcone.data.order.FillData.prototype.getActualAmountQuoteToken = function() {
  return /** @type{?proto.io.lightcone.data.types.Amount} */ (
    jspb.Message.getWrapperField(this, data_types_pb.Amount, 12));
};


/** @param {?proto.io.lightcone.data.types.Amount|undefined} value */
proto.io.lightcone.data.order.FillData.prototype.setActualAmountQuoteToken = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.io.lightcone.data.order.FillData.prototype.clearActualAmountQuoteToken = function() {
  this.setActualAmountQuoteToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.lightcone.data.order.FillData.prototype.hasActualAmountQuoteToken = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional uint64 created_at = 13;
 * @return {number}
 */
proto.io.lightcone.data.order.FillData.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.io.lightcone.data.order.FillData.prototype.setCreatedAt = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional uint64 updated_at = 14;
 * @return {number}
 */
proto.io.lightcone.data.order.FillData.prototype.getUpdatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.io.lightcone.data.order.FillData.prototype.setUpdatedAt = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


goog.object.extend(exports, proto.io.lightcone.data.order);
